<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>token - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><style>body{margin:0px;font-family:Helvetica,Arial,sans-serif;font-size:16px}pre,code{font-family:Menlo,monospace;font-size:14px}pre{line-height:18px}pre .comment{color:#060}body{color:#222}a,.exampleHeading .text{color:#375eab;text-decoration:none}a:hover,.exampleHeading .text:hover{text-decoration:underline}p,pre,ul,ol{margin:20px}pre{background-color:#e9e9e9;padding:10px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px;background-position:initial initial;background-repeat:initial initial}h1,h2,h3,h4,.rootHeading{margin:20px 0px;padding:0px;color:#375eab;font-weight:bold}h1{font-size:24px}h2{font-size:20px;background-color:#e0ebf5;padding:2px 5px;background-position:initial initial;background-repeat:initial initial}h3{font-size:20px}h3,h4{margin:20px 5px}h4{font-size:16px}dl{margin:20px}dd{margin:2px 20px}dl,dd{font-size:14px}div#heading{float:left;margin:0px 0px 10px;padding:21px 0px;font-size:20px;font-weight:normal}div#heading a{color:#222;text-decoration:none}div#topbar{background-color:#e0ebf5;height:64px;overflow:hidden;background-position:initial initial;background-repeat:initial initial}body{text-align:center}div#page{width:100%}div#page>.container,div#topbar>.container{text-align:left;margin-left:auto;margin-right:auto;padding:0px 20px;width:900px}div#page.wide>.container,div#topbar.wide>.container{width:auto}div#plusone{float:right;clear:right;margin-top:5px}div#footer{text-align:center;color:#666;font-size:14px;margin:40px 0px}div#menu>a,div#menu>input,div#learn .buttons a,div.play .buttons a,div#blog .read a{padding:10px;text-decoration:none;font-size:16px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px}div#playground .buttons a,div#menu>a,div#menu>input{border:1px solid #375eab}div#playground .buttons a,div#menu>a{color:#fff;background-color:#375eab;background-position:initial initial;background-repeat:initial initial}a#start,div#learn .buttons a,div.play .buttons a,div#blog .read a{color:#222;border:1px solid #375eab;background-color:#e0ebf5;background-position:initial initial;background-repeat:initial initial}div#menu{float:right;min-width:590px;padding:10px 0px;text-align:right}div#menu>a{margin-right:5px;margin-bottom:10px;padding:10px}div#menu>input{position:relative;top:1px;width:60px;background-color:#fff;color:#222;background-position:initial initial;background-repeat:initial initial}div#menu>input.inactive{color:#999}.toggleButton{cursor:pointer}.toggle .collapsed{display:block}.toggle .expanded{display:none}.toggleVisible .collapsed{display:none}.toggleVisible .expanded{display:block}h2{clear:right}div.play{padding:0px 20px 40px}div.play pre,div.play textarea,div.play .lines{padding:0px;margin:0px;font-family:Menlo,monospace;font-size:14px}div.play .input{padding:10px;margin-top:10px;border-top-left-radius:5px;border-top-right-radius:5px;overflow:hidden}div.play .input textarea{width:100%;height:100%;border:none;outline:none;resize:none;overflow:hidden}div#playground .input textarea{overflow:auto;resize:auto}div.play .output{padding:10px;max-height:200px;overflow:auto;border-bottom-right-radius:5px;border-bottom-left-radius:5px;border-top-style:none!important}div.play .output pre{padding:0px;border-top-left-radius:0px;border-top-right-radius:0px;border-bottom-right-radius:0px;border-bottom-left-radius:0px}div.play .input,div.play .input textarea,div.play .output,div.play .output pre{background-color:#ffffd8;background-position:initial initial;background-repeat:initial initial}div.play .input,div.play .output{border:1px solid #375eab}div.play .buttons{float:right;padding:20px 0px 10px;text-align:right}div.play .buttons a{height:16px;margin-left:5px;padding:10px;cursor:pointer}#playgroundButton,div#playground{display:none}div#playground{position:absolute;top:63px;right:20px;padding:0px 10px 10px;z-index:1;text-align:left;background-color:#e0ebf5;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-style:none solid solid;border-right-color:#b0bbc5;border-bottom-color:#b0bbc5;border-left-color:#b0bbc5;border-bottom-left-radius:5px;border-bottom-right-radius:5px;background-position:initial initial;background-repeat:initial initial}div#playground .code{width:520px;height:200px}div#playground .output{height:100px}</style>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

<script type="text/javascript">window.initFuncs=[];</script>
<script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-11222381-2"]);_gaq.push(["_trackPageview"]);</script>
<link rel="dns-prefetch" href="//ajax.googleapis.com"><link rel="dns-prefetch" href="//1-ps.googleusercontent.com"><link rel="dns-prefetch" href="//www.gstatic.com"><link rel="canonical" href="http://golang.org/pkg/go/token/"/></head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package token</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "go/token"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				<p>
Package token defines constants representing the lexical tokens of the Go
programming language and basic operations on tokens (printing, predicates).
</p>

			</div>
		</div>
		

		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
				<dd><a href="#pkg-constants">Constants</a></dd>
			
			
			
			
				
				<dd><a href="#File">type File</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#File.AddLine">func (f *File) AddLine(offset int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.AddLineInfo">func (f *File) AddLineInfo(offset int, filename string, line int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Base">func (f *File) Base() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Line">func (f *File) Line(p Pos) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.LineCount">func (f *File) LineCount() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Name">func (f *File) Name() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Offset">func (f *File) Offset(p Pos) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Pos">func (f *File) Pos(offset int) Pos</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Position">func (f *File) Position(p Pos) (pos Position)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.SetLines">func (f *File) SetLines(lines []int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.SetLinesForContent">func (f *File) SetLinesForContent(content []byte)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Size">func (f *File) Size() int</a></dd>
				
			
				
				<dd><a href="#FileSet">type FileSet</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFileSet">func NewFileSet() *FileSet</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.AddFile">func (s *FileSet) AddFile(filename string, base, size int) *File</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Base">func (s *FileSet) Base() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.File">func (s *FileSet) File(p Pos) (f *File)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Iterate">func (s *FileSet) Iterate(f func(*File) bool)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Position">func (s *FileSet) Position(p Pos) (pos Position)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Read">func (s *FileSet) Read(decode func(interface{}) error) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Write">func (s *FileSet) Write(encode func(interface{}) error) error</a></dd>
				
			
				
				<dd><a href="#Pos">type Pos</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Pos.IsValid">func (p Pos) IsValid() bool</a></dd>
				
			
				
				<dd><a href="#Position">type Position</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Position.IsValid">func (pos *Position) IsValid() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Position.String">func (pos Position) String() string</a></dd>
				
			
				
				<dd><a href="#Token">type Token</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Lookup">func Lookup(ident string) Token</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.IsKeyword">func (tok Token) IsKeyword() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.IsLiteral">func (tok Token) IsLiteral() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.IsOperator">func (tok Token) IsOperator() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.Precedence">func (op Token) Precedence() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.String">func (tok Token) String() string</a></dd>
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="/src/pkg/go/token/position.go">position.go</a>
			
				<a href="/src/pkg/go/token/serialize.go">serialize.go</a>
			
				<a href="/src/pkg/go/token/token.go">token.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
			<h2 id="pkg-constants">Constants</h2>
			
				<pre>const (
        <span id="LowestPrec">LowestPrec</span>  = 0 <span class="comment">// non-operators</span>
        <span id="UnaryPrec">UnaryPrec</span>   = 6
        <span id="HighestPrec">HighestPrec</span> = 7
)</pre>
				<p>
A set of constants for precedence-based expression parsing.
Non-operators have lowest precedence, followed by operators
starting with precedence 1 up to unary operators. The highest
precedence serves as &#34;catch-all&#34; precedence for selector,
indexing, and other operator and delimiter tokens.
</p>

			
		
		
		
		
			
			
			<h2 id="File">type <a href="/src/pkg/go/token/position.go?s=2971:3251#L83">File</a></h2>
			<pre>type File struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A File is a handle for a file belonging to a FileSet.
A File has a name, size, and line offset table.
</p>


			

			

			

			

			
				
				<h3 id="File.AddLine">func (*File) <a href="/src/pkg/go/token/position.go?s=3952:3986#L121">AddLine</a></h3>
				<pre>func (f *<a href="#File">File</a>) AddLine(offset <a href="/pkg/builtin/#int">int</a>)</pre>
				<p>
AddLine adds the line offset for a new line.
The line offset must be larger than the offset for the previous line
and smaller than the file size; otherwise the line offset is ignored.
</p>

				
				
			
				
				<h3 id="File.AddLineInfo">func (*File) <a href="/src/pkg/go/token/position.go?s=5941:6006#L191">AddLineInfo</a></h3>
				<pre>func (f *<a href="#File">File</a>) AddLineInfo(offset <a href="/pkg/builtin/#int">int</a>, filename <a href="/pkg/builtin/#string">string</a>, line <a href="/pkg/builtin/#int">int</a>)</pre>
				<p>
AddLineInfo adds alternative file and line number information for
a given file offset. The offset must be larger than the offset for
the previously added alternative line info and smaller than the
file size; otherwise the information is ignored.
</p>
<p>
AddLineInfo is typically used to register alternative position
information for //line filename:line comments in source files.
</p>

				
				
			
				
				<h3 id="File.Base">func (*File) <a href="/src/pkg/go/token/position.go?s=3440:3465#L100">Base</a></h3>
				<pre>func (f *<a href="#File">File</a>) Base() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
Base returns the base offset of file f as registered with AddFile.
</p>

				
				
			
				
				<h3 id="File.Line">func (*File) <a href="/src/pkg/go/token/position.go?s=6851:6881#L224">Line</a></h3>
				<pre>func (f *<a href="#File">File</a>) Line(p <a href="#Pos">Pos</a>) <a href="/pkg/builtin/#int">int</a></pre>
				<p>
Line returns the line number for the given file position p;
p must be a Pos value in that file or NoPos.
</p>

				
				
			
				
				<h3 id="File.LineCount">func (*File) <a href="/src/pkg/go/token/position.go?s=3647:3677#L110">LineCount</a></h3>
				<pre>func (f *<a href="#File">File</a>) LineCount() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
LineCount returns the number of lines in file f.
</p>

				
				
			
				
				<h3 id="File.Name">func (*File) <a href="/src/pkg/go/token/position.go?s=3321:3349#L95">Name</a></h3>
				<pre>func (f *<a href="#File">File</a>) Name() <a href="/pkg/builtin/#string">string</a></pre>
				<p>
Name returns the file name of file f as registered with AddFile.
</p>

				
				
			
				
				<h3 id="File.Offset">func (*File) <a href="/src/pkg/go/token/position.go?s=6595:6627#L214">Offset</a></h3>
				<pre>func (f *<a href="#File">File</a>) Offset(p <a href="#Pos">Pos</a>) <a href="/pkg/builtin/#int">int</a></pre>
				<p>
Offset returns the offset for the given file position p;
p must be a valid Pos value in that file.
f.Offset(f.Pos(offset)) == offset.
</p>

				
				
			
				
				<h3 id="File.Pos">func (*File) <a href="/src/pkg/go/token/position.go?s=6324:6358#L203">Pos</a></h3>
				<pre>func (f *<a href="#File">File</a>) Pos(offset <a href="/pkg/builtin/#int">int</a>) <a href="#Pos">Pos</a></pre>
				<p>
Pos returns the Pos value for the given file offset;
the offset must be &lt;= f.Size().
f.Pos(f.Offset(p)) == p.
</p>

				
				
			
				
				<h3 id="File.Position">func (*File) <a href="/src/pkg/go/token/position.go?s=7911:7956#L262">Position</a></h3>
				<pre>func (f *<a href="#File">File</a>) Position(p <a href="#Pos">Pos</a>) (pos <a href="#Position">Position</a>)</pre>
				<p>
Position returns the Position value for the given file position p;
p must be a Pos value in that file or NoPos.
</p>

				
				
			
				
				<h3 id="File.SetLines">func (*File) <a href="/src/pkg/go/token/position.go?s=4579:4620#L137">SetLines</a></h3>
				<pre>func (f *<a href="#File">File</a>) SetLines(lines []<a href="/pkg/builtin/#int">int</a>) <a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
SetLines sets the line offsets for a file and returns true if successful.
The line offsets are the offsets of the first character of each line;
for instance for the content &#34;ab\nc\n&#34; the line offsets are {0, 3}.
An empty file has an empty line offset table.
Each line offset must be larger than the offset for the previous line
and smaller than the file size; otherwise SetLines fails and returns
false.
</p>

				
				
			
				
				<h3 id="File.SetLinesForContent">func (*File) <a href="/src/pkg/go/token/position.go?s=4952:5001#L154">SetLinesForContent</a></h3>
				<pre>func (f *<a href="#File">File</a>) SetLinesForContent(content []<a href="/pkg/builtin/#byte">byte</a>)</pre>
				<p>
SetLinesForContent sets the line offsets for the given file content.
</p>

				
				
			
				
				<h3 id="File.Size">func (*File) <a href="/src/pkg/go/token/position.go?s=3549:3574#L105">Size</a></h3>
				<pre>func (f *<a href="#File">File</a>) Size() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
Size returns the size of file f as registered with AddFile.
</p>

				
				
			
		
			
			
			<h2 id="FileSet">type <a href="/src/pkg/go/token/position.go?s=8333:8573#L279">FileSet</a></h2>
			<pre>type FileSet struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A FileSet represents a set of source files.
Methods of file sets are synchronized; multiple goroutines
may invoke them concurrently.
</p>


			

			

			

			
				
				<h3 id="NewFileSet">func <a href="/src/pkg/go/token/position.go?s=8613:8639#L287">NewFileSet</a></h3>
				<pre>func NewFileSet() *<a href="#FileSet">FileSet</a></pre>
				<p>
NewFileSet creates a new file set.
</p>

				
			

			
				
				<h3 id="FileSet.AddFile">func (*FileSet) <a href="/src/pkg/go/token/position.go?s=9581:9645#L319">AddFile</a></h3>
				<pre>func (s *<a href="#FileSet">FileSet</a>) AddFile(filename <a href="/pkg/builtin/#string">string</a>, base, size <a href="/pkg/builtin/#int">int</a>) *<a href="#File">File</a></pre>
				<p>
AddFile adds a new file with a given filename, base offset, and file size
to the file set s and returns the file. Multiple files may have the same
name. The base offset must not be smaller than the FileSet&#39;s Base(), and
size must not be negative.
</p>
<p>
Adding the file will set the file set&#39;s Base() value to base + size + 1
as the minimum base value for the next file. The following relationship
exists between a Pos value p for a given file offset offs:
</p>
<pre>int(p) = base + offs
</pre>
<p>
with offs in the range [0, size] and thus p in the range [base, base+size].
For convenience, File.Pos may be used to create file-specific position
values from a file offset.
</p>

				
				
			
				
				<h3 id="FileSet.Base">func (*FileSet) <a href="/src/pkg/go/token/position.go?s=8797:8825#L296">Base</a></h3>
				<pre>func (s *<a href="#FileSet">FileSet</a>) Base() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
Base returns the minimum base offset that must be provided to
AddFile when adding the next file.
</p>

				
				
			
				
				<h3 id="FileSet.File">func (*FileSet) <a href="/src/pkg/go/token/position.go?s=11232:11271#L386">File</a></h3>
				<pre>func (s *<a href="#FileSet">FileSet</a>) File(p <a href="#Pos">Pos</a>) (f *<a href="#File">File</a>)</pre>
				<p>
File returns the file that contains the position p.
If no such file is found (for instance for p == NoPos),
the result is nil.
</p>

				
				
			
				
				<h3 id="FileSet.Iterate">func (*FileSet) <a href="/src/pkg/go/token/position.go?s=10194:10239#L341">Iterate</a></h3>
				<pre>func (s *<a href="#FileSet">FileSet</a>) Iterate(f func(*<a href="#File">File</a>) <a href="/pkg/builtin/#bool">bool</a>)</pre>
				<p>
Iterate calls f for the files in the file set in the order they were added
until f returns false.
</p>

				
				
			
				
				<h3 id="FileSet.Position">func (*FileSet) <a href="/src/pkg/go/token/position.go?s=11388:11436#L394">Position</a></h3>
				<pre>func (s *<a href="#FileSet">FileSet</a>) Position(p <a href="#Pos">Pos</a>) (pos <a href="#Position">Position</a>)</pre>
				<p>
Position converts a Pos in the fileset into a general Position.
</p>

				
				
			
				
				<h3 id="FileSet.Read">func (*FileSet) <a href="/src/pkg/go/token/serialize.go?s=490:550#L12">Read</a></h3>
				<pre>func (s *<a href="#FileSet">FileSet</a>) Read(decode func(interface{}) <a href="/pkg/builtin/#error">error</a>) <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Read calls decode to deserialize a file set into s; s must not be nil.
</p>

				
				
			
				
				<h3 id="FileSet.Write">func (*FileSet) <a href="/src/pkg/go/token/serialize.go?s=947:1008#L33">Write</a></h3>
				<pre>func (s *<a href="#FileSet">FileSet</a>) Write(encode func(interface{}) <a href="/pkg/builtin/#error">error</a>) <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Write calls encode to serialize the file set s.
</p>

				
				
			
		
			
			
			<h2 id="Pos">type <a href="/src/pkg/go/token/position.go?s=2370:2382#L63">Pos</a></h2>
			<pre>type Pos <a href="/pkg/builtin/#int">int</a></pre>
			<p>
Pos is a compact encoding of a source position within a file set.
It can be converted into a Position for a more convenient, but much
larger, representation.
</p>
<p>
The Pos value for a given file is a number in the range [base, base+size],
where base and size are specified when adding the file to the file set via
AddFile.
</p>
<p>
To create the Pos value for a specific source offset, first add
the respective file to the current file set (via FileSet.AddFile)
and then call File.Pos(offset) for that file. Given a Pos value p
for a specific file set fset, the corresponding Position value is
obtained by calling fset.Position(p).
</p>
<p>
Pos values can be compared directly with the usual comparison operators:
If two Pos values p and q are in the same file, comparing p and q is
equivalent to comparing the respective source file offsets. If p and q
are in different files, p &lt; q is true if the file implied by p was added
to the respective file set before the file implied by q.
</p>


			
				<pre>const <span id="NoPos">NoPos</span> <a href="#Pos">Pos</a> = 0</pre>
				<p>
The zero value for Pos is NoPos; there is no file and line information
associated with it, and NoPos().IsValid() is false. NoPos is always
smaller than any other Pos value. The corresponding Position value
for NoPos is the zero value for Position.
</p>

			

			

			

			

			
				
				<h3 id="Pos.IsValid">func (Pos) <a href="/src/pkg/go/token/position.go?s=2718:2745#L73">IsValid</a></h3>
				<pre>func (p <a href="#Pos">Pos</a>) IsValid() <a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
IsValid returns true if the position is valid.
</p>

				
				
			
		
			
			
			<h2 id="Position">type <a href="/src/pkg/go/token/position.go?s=539:756#L12">Position</a></h2>
			<pre>type Position struct {
        Filename <a href="/pkg/builtin/#string">string</a> <span class="comment">// filename, if any</span>
        Offset   <a href="/pkg/builtin/#int">int</a>    <span class="comment">// offset, starting at 0</span>
        Line     <a href="/pkg/builtin/#int">int</a>    <span class="comment">// line number, starting at 1</span>
        Column   <a href="/pkg/builtin/#int">int</a>    <span class="comment">// column number, starting at 1 (character count)</span>
}</pre>
			<p>
Position describes an arbitrary source position
including the file, line, and column location.
A Position is valid if the line number is &gt; 0.
</p>


			

			

			

			

			
				
				<h3 id="Position.IsValid">func (*Position) <a href="/src/pkg/go/token/position.go?s=808:843#L20">IsValid</a></h3>
				<pre>func (pos *<a href="#Position">Position</a>) IsValid() <a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
IsValid returns true if the position is valid.
</p>

				
				
			
				
				<h3 id="Position.String">func (Position) <a href="/src/pkg/go/token/position.go?s=1149:1184#L29">String</a></h3>
				<pre>func (pos <a href="#Position">Position</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				<p>
String returns a string in one of several forms:
</p>
<pre>file:line:column    valid position with file name
line:column         valid position without file name
file                invalid position with file name
-                   invalid position without file name
</pre>

				
				
			
		
			
			
			<h2 id="Token">type <a href="/src/pkg/go/token/token.go?s=422:436#L3">Token</a></h2>
			<pre>type Token <a href="/pkg/builtin/#int">int</a></pre>
			<p>
Token is the set of lexical tokens of the Go programming language.
</p>


			
				<pre>const (
        <span class="comment">// Special tokens</span>
        <span id="ILLEGAL">ILLEGAL</span> <a href="#Token">Token</a> = <a href="/pkg/builtin/#iota">iota</a>
        <span id="EOF">EOF</span>
        <span id="COMMENT">COMMENT</span>

        <span class="comment">// Identifiers and basic type literals</span>
        <span class="comment">// (these tokens stand for classes of literals)</span>
        <span id="IDENT">IDENT</span>  <span class="comment">// main</span>
        <span id="INT">INT</span>    <span class="comment">// 12345</span>
        <span id="FLOAT">FLOAT</span>  <span class="comment">// 123.45</span>
        <span id="IMAG">IMAG</span>   <span class="comment">// 123.45i</span>
        <span id="CHAR">CHAR</span>   <span class="comment">// &#39;a&#39;</span>
        <span id="STRING">STRING</span> <span class="comment">// &#34;abc&#34;</span>

        <span class="comment">// Operators and delimiters</span>
        <span id="ADD">ADD</span> <span class="comment">// +</span>
        <span id="SUB">SUB</span> <span class="comment">// -</span>
        <span id="MUL">MUL</span> <span class="comment">// *</span>
        <span id="QUO">QUO</span> <span class="comment">// /</span>
        <span id="REM">REM</span> <span class="comment">// %</span>

        <span id="AND">AND</span>     <span class="comment">// &amp;</span>
        <span id="OR">OR</span>      <span class="comment">// |</span>
        <span id="XOR">XOR</span>     <span class="comment">// ^</span>
        <span id="SHL">SHL</span>     <span class="comment">// &lt;&lt;</span>
        <span id="SHR">SHR</span>     <span class="comment">// &gt;&gt;</span>
        <span id="AND_NOT">AND_NOT</span> <span class="comment">// &amp;^</span>

        <span id="ADD_ASSIGN">ADD_ASSIGN</span> <span class="comment">// +=</span>
        <span id="SUB_ASSIGN">SUB_ASSIGN</span> <span class="comment">// -=</span>
        <span id="MUL_ASSIGN">MUL_ASSIGN</span> <span class="comment">// *=</span>
        <span id="QUO_ASSIGN">QUO_ASSIGN</span> <span class="comment">// /=</span>
        <span id="REM_ASSIGN">REM_ASSIGN</span> <span class="comment">// %=</span>

        <span id="AND_ASSIGN">AND_ASSIGN</span>     <span class="comment">// &amp;=</span>
        <span id="OR_ASSIGN">OR_ASSIGN</span>      <span class="comment">// |=</span>
        <span id="XOR_ASSIGN">XOR_ASSIGN</span>     <span class="comment">// ^=</span>
        <span id="SHL_ASSIGN">SHL_ASSIGN</span>     <span class="comment">// &lt;&lt;=</span>
        <span id="SHR_ASSIGN">SHR_ASSIGN</span>     <span class="comment">// &gt;&gt;=</span>
        <span id="AND_NOT_ASSIGN">AND_NOT_ASSIGN</span> <span class="comment">// &amp;^=</span>

        <span id="LAND">LAND</span>  <span class="comment">// &amp;&amp;</span>
        <span id="LOR">LOR</span>   <span class="comment">// ||</span>
        <span id="ARROW">ARROW</span> <span class="comment">// &lt;-</span>
        <span id="INC">INC</span>   <span class="comment">// ++</span>
        <span id="DEC">DEC</span>   <span class="comment">// --</span>

        <span id="EQL">EQL</span>    <span class="comment">// ==</span>
        <span id="LSS">LSS</span>    <span class="comment">// &lt;</span>
        <span id="GTR">GTR</span>    <span class="comment">// &gt;</span>
        <span id="ASSIGN">ASSIGN</span> <span class="comment">// =</span>
        <span id="NOT">NOT</span>    <span class="comment">// !</span>

        <span id="NEQ">NEQ</span>      <span class="comment">// !=</span>
        <span id="LEQ">LEQ</span>      <span class="comment">// &lt;=</span>
        <span id="GEQ">GEQ</span>      <span class="comment">// &gt;=</span>
        <span id="DEFINE">DEFINE</span>   <span class="comment">// :=</span>
        <span id="ELLIPSIS">ELLIPSIS</span> <span class="comment">// ...</span>

        <span id="LPAREN">LPAREN</span> <span class="comment">// (</span>
        <span id="LBRACK">LBRACK</span> <span class="comment">// [</span>
        <span id="LBRACE">LBRACE</span> <span class="comment">// {</span>
        <span id="COMMA">COMMA</span>  <span class="comment">// ,</span>
        <span id="PERIOD">PERIOD</span> <span class="comment">// .</span>

        <span id="RPAREN">RPAREN</span>    <span class="comment">// )</span>
        <span id="RBRACK">RBRACK</span>    <span class="comment">// ]</span>
        <span id="RBRACE">RBRACE</span>    <span class="comment">// }</span>
        <span id="SEMICOLON">SEMICOLON</span> <span class="comment">// ;</span>
        <span id="COLON">COLON</span>     <span class="comment">// :</span>

        <span class="comment">// Keywords</span>
        <span id="BREAK">BREAK</span>
        <span id="CASE">CASE</span>
        <span id="CHAN">CHAN</span>
        <span id="CONST">CONST</span>
        <span id="CONTINUE">CONTINUE</span>

        <span id="DEFAULT">DEFAULT</span>
        <span id="DEFER">DEFER</span>
        <span id="ELSE">ELSE</span>
        <span id="FALLTHROUGH">FALLTHROUGH</span>
        <span id="FOR">FOR</span>

        <span id="FUNC">FUNC</span>
        <span id="GO">GO</span>
        <span id="GOTO">GOTO</span>
        <span id="IF">IF</span>
        <span id="IMPORT">IMPORT</span>

        <span id="INTERFACE">INTERFACE</span>
        <span id="MAP">MAP</span>
        <span id="PACKAGE">PACKAGE</span>
        <span id="RANGE">RANGE</span>
        <span id="RETURN">RETURN</span>

        <span id="SELECT">SELECT</span>
        <span id="STRUCT">STRUCT</span>
        <span id="SWITCH">SWITCH</span>
        <span id="TYPE">TYPE</span>
        <span id="VAR">VAR</span>
)</pre>
				<p>
The list of tokens.
</p>

			

			

			

			
				
				<h3 id="Lookup">func <a href="/src/pkg/go/token/token.go?s=4785:4816#L276">Lookup</a></h3>
				<pre>func Lookup(ident <a href="/pkg/builtin/#string">string</a>) <a href="#Token">Token</a></pre>
				<p>
Lookup maps an identifier to its keyword token or IDENT (if not a keyword).
</p>

				
			

			
				
				<h3 id="Token.IsKeyword">func (Token) <a href="/src/pkg/go/token/token.go?s=5431:5464#L298">IsKeyword</a></h3>
				<pre>func (tok <a href="#Token">Token</a>) IsKeyword() <a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
IsKeyword returns true for tokens corresponding to keywords;
it returns false otherwise.
</p>

				
				
			
				
				<h3 id="Token.IsLiteral">func (Token) <a href="/src/pkg/go/token/token.go?s=5045:5078#L288">IsLiteral</a></h3>
				<pre>func (tok <a href="#Token">Token</a>) IsLiteral() <a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
IsLiteral returns true for tokens corresponding to identifiers
and basic type literals; it returns false otherwise.
</p>

				
				
			
				
				<h3 id="Token.IsOperator">func (Token) <a href="/src/pkg/go/token/token.go?s=5245:5279#L293">IsOperator</a></h3>
				<pre>func (tok <a href="#Token">Token</a>) IsOperator() <a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
IsOperator returns true for tokens corresponding to operators and
delimiters; it returns false otherwise.
</p>

				
				
			
				
				<h3 id="Token.Precedence">func (Token) <a href="/src/pkg/go/token/token.go?s=4284:4316#L249">Precedence</a></h3>
				<pre>func (op <a href="#Token">Token</a>) Precedence() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
Precedence returns the operator precedence of the binary
operator op. If op is not a binary operator, the result
is LowestPrecedence.
</p>

				
				
			
				
				<h3 id="Token.String">func (Token) <a href="/src/pkg/go/token/token.go?s=3566:3598#L222">String</a></h3>
				<pre>func (tok <a href="#Token">Token</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				<p>
String returns the string corresponding to the token tok.
For operators, delimiters, and keywords the string is the actual
token character sequence (e.g., for the token ADD, the string is
&#34;+&#34;). For all other tokens the string corresponds to the token
constant name (e.g. for the token IDENT, the string is &#34;IDENT&#34;).
</p>

				
				
			
		
	

	







<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/playground.js.pagespeed.jm.Up9d4M3oKE.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
<script type="text/javascript">$(function(){if(!$('#topbar').is('.wide'))return;$('<a href="#feedback" id="feedback">Send Feedback</a>').insertAfter('#topbar');$('#feedback').click(function(){userfeedback.api.startFeedback({'productId':'92634','bucket':'godoc'});return false;});});</script>
<style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style>


<script type="text/javascript">(function(){var ga=document.createElement("script");ga.type="text/javascript";ga.async=true;ga.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga,s);})();</script>
<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vo', 'load', '&ft=57&s_ttfb=77&id=1376729349645427', 'http://golang.org/pkg/go/token/');</script></body>
</html>

<noscript class="psa_add_styles"><link type="text/css" rel="stylesheet" href="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/A.style.css.pagespeed.cf.NnmSRHJsAc.css"><style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style></noscript><script pagespeed_no_defer="">var stylesAdded=false;var addAllStyles=function(){if(stylesAdded)return;stylesAdded=true;var div=document.createElement("div");var styleText="";var styleElements=document.getElementsByClassName("psa_add_styles");for(var i=0;i<styleElements.length;++i){styleText+=styleElements[i].textContent||styleElements[i].innerHTML||styleElements[i].data||"";}div.innerHTML=styleText;document.body.appendChild(div);};if(window.addEventListener){document.addEventListener("DOMContentLoaded",addAllStyles,false);window.addEventListener("load",addAllStyles,false);}else if(window.attachEvent){window.attachEvent("onload",addAllStyles);}else{window.onload=addAllStyles;}window['pagespeed']=window['pagespeed']||{};window['pagespeed']['criticalCss']={'total_critical_inlined_size':5177,'total_original_external_size':6889,'total_overhead_size':5553,'num_replaced_links':1,'num_unreplaced_links':0};</script>