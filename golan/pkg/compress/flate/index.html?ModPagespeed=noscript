<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>flate - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link type="text/css" rel="stylesheet" href="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/A.style.css.pagespeed.cf.NnmSRHJsAc.css">

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

<script type="text/javascript">window.initFuncs=[];</script>
<script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-11222381-2"]);_gaq.push(["_trackPageview"]);</script>
<style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style><link rel="dns-prefetch" href="//ajax.googleapis.com"><link rel="dns-prefetch" href="//www.gstatic.com"><link rel="canonical" href="http://golang.org/pkg/compress/flate/"/></head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package flate</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "compress/flate"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				<p>
Package flate implements the DEFLATE compressed data format, described in
RFC 1951.  The gzip and zlib packages implement access to DEFLATE-based file
formats.
</p>

			</div>
		</div>
		

		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
				<dd><a href="#pkg-constants">Constants</a></dd>
			
			
			
				
				<dd><a href="#NewReader">func NewReader(r io.Reader) io.ReadCloser</a></dd>
			
				
				<dd><a href="#NewReaderDict">func NewReaderDict(r io.Reader, dict []byte) io.ReadCloser</a></dd>
			
			
				
				<dd><a href="#CorruptInputError">type CorruptInputError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#CorruptInputError.Error">func (e CorruptInputError) Error() string</a></dd>
				
			
				
				<dd><a href="#InternalError">type InternalError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#InternalError.Error">func (e InternalError) Error() string</a></dd>
				
			
				
				<dd><a href="#ReadError">type ReadError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ReadError.Error">func (e *ReadError) Error() string</a></dd>
				
			
				
				<dd><a href="#Reader">type Reader</a></dd>
				
				
			
				
				<dd><a href="#WriteError">type WriteError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#WriteError.Error">func (e *WriteError) Error() string</a></dd>
				
			
				
				<dd><a href="#Writer">type Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriter">func NewWriter(w io.Writer, level int) (*Writer, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriterDict">func NewWriterDict(w io.Writer, level int, dict []byte) (*Writer, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Close">func (w *Writer) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Flush">func (w *Writer) Flush() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Write">func (w *Writer) Write(data []byte) (n int, err error)</a></dd>
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="/src/pkg/compress/flate/copy.go">copy.go</a>
			
				<a href="/src/pkg/compress/flate/deflate.go">deflate.go</a>
			
				<a href="/src/pkg/compress/flate/fixedhuff.go">fixedhuff.go</a>
			
				<a href="/src/pkg/compress/flate/huffman_bit_writer.go">huffman_bit_writer.go</a>
			
				<a href="/src/pkg/compress/flate/huffman_code.go">huffman_code.go</a>
			
				<a href="/src/pkg/compress/flate/inflate.go">inflate.go</a>
			
				<a href="/src/pkg/compress/flate/reverse_bits.go">reverse_bits.go</a>
			
				<a href="/src/pkg/compress/flate/token.go">token.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
			<h2 id="pkg-constants">Constants</h2>
			
				<pre>const (
        <span id="NoCompression">NoCompression</span> = 0
        <span id="BestSpeed">BestSpeed</span>     = 1

        <span id="BestCompression">BestCompression</span>    = 9
        <span id="DefaultCompression">DefaultCompression</span> = -1
)</pre>
				
			
		
		
		
			
			
			<h2 id="NewReader">func <a href="/src/pkg/compress/flate/inflate.go?s=14943:14984#L659">NewReader</a></h2>
			<pre>func NewReader(r <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Reader">Reader</a>) <a href="/pkg/io/">io</a>.<a href="/pkg/io/#ReadCloser">ReadCloser</a></pre>
			<p>
NewReader returns a new ReadCloser that can be used
to read the uncompressed version of r.  It is the caller&#39;s
responsibility to call Close on the ReadCloser when
finished reading.
</p>

			
		
			
			
			<h2 id="NewReaderDict">func <a href="/src/pkg/compress/flate/inflate.go?s=15480:15538#L674">NewReaderDict</a></h2>
			<pre>func NewReaderDict(r <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Reader">Reader</a>, dict []<a href="/pkg/builtin/#byte">byte</a>) <a href="/pkg/io/">io</a>.<a href="/pkg/io/#ReadCloser">ReadCloser</a></pre>
			<p>
NewReaderDict is like NewReader but initializes the reader
with a preset dictionary.  The returned Reader behaves as if
the uncompressed data stream started with the given dictionary,
which has already been read.  NewReaderDict is typically used
to read data compressed by NewWriterDict.
</p>

			
		
		
			
			
			<h2 id="CorruptInputError">type <a href="/src/pkg/compress/flate/inflate.go?s=714:742#L16">CorruptInputError</a></h2>
			<pre>type CorruptInputError <a href="/pkg/builtin/#int64">int64</a></pre>
			<p>
A CorruptInputError reports the presence of corrupt input at a given offset.
</p>


			

			

			

			

			
				
				<h3 id="CorruptInputError.Error">func (CorruptInputError) <a href="/src/pkg/compress/flate/inflate.go?s=744:785#L18">Error</a></h3>
				<pre>func (e <a href="#CorruptInputError">CorruptInputError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="InternalError">type <a href="/src/pkg/compress/flate/inflate.go?s=934:959#L23">InternalError</a></h2>
			<pre>type InternalError <a href="/pkg/builtin/#string">string</a></pre>
			<p>
An InternalError reports an error in the flate code itself.
</p>


			

			

			

			

			
				
				<h3 id="InternalError.Error">func (InternalError) <a href="/src/pkg/compress/flate/inflate.go?s=961:998#L25">Error</a></h3>
				<pre>func (e <a href="#InternalError">InternalError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="ReadError">type <a href="/src/pkg/compress/flate/inflate.go?s=1114:1240#L28">ReadError</a></h2>
			<pre>type ReadError struct {
        Offset <a href="/pkg/builtin/#int64">int64</a> <span class="comment">// byte offset where error occurred</span>
        Err    <a href="/pkg/builtin/#error">error</a> <span class="comment">// error returned by underlying Read</span>
}</pre>
			<p>
A ReadError reports an error encountered while reading input.
</p>


			

			

			

			

			
				
				<h3 id="ReadError.Error">func (*ReadError) <a href="/src/pkg/compress/flate/inflate.go?s=1242:1276#L33">Error</a></h3>
				<pre>func (e *<a href="#ReadError">ReadError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Reader">type <a href="/src/pkg/compress/flate/inflate.go?s=5115:5183#L160">Reader</a></h2>
			<pre>type Reader interface {
        <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Reader">Reader</a>
        ReadByte() (c <a href="/pkg/builtin/#byte">byte</a>, err <a href="/pkg/builtin/#error">error</a>)
}</pre>
			<p>
The actual read interface needed by NewReader.
If the passed in io.Reader does not also have ReadByte,
the NewReader will introduce its own buffering.
</p>


			

			

			

			

			
		
			
			
			<h2 id="WriteError">type <a href="/src/pkg/compress/flate/inflate.go?s=1445:1573#L38">WriteError</a></h2>
			<pre>type WriteError struct {
        Offset <a href="/pkg/builtin/#int64">int64</a> <span class="comment">// byte offset where error occurred</span>
        Err    <a href="/pkg/builtin/#error">error</a> <span class="comment">// error returned by underlying Write</span>
}</pre>
			<p>
A WriteError reports an error encountered while writing output.
</p>


			

			

			

			

			
				
				<h3 id="WriteError.Error">func (*WriteError) <a href="/src/pkg/compress/flate/inflate.go?s=1575:1610#L43">Error</a></h3>
				<pre>func (e *<a href="#WriteError">WriteError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Writer">type <a href="/src/pkg/compress/flate/deflate.go?s=13046:13082#L472">Writer</a></h2>
			<pre>type Writer struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Writer takes data written to it and writes the compressed
form of that data to an underlying writer (see NewWriter).
</p>


			

			

			

			
				
				<h3 id="NewWriter">func <a href="/src/pkg/compress/flate/deflate.go?s=11968:12023#L431">NewWriter</a></h3>
				<pre>func NewWriter(w <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Writer">Writer</a>, level <a href="/pkg/builtin/#int">int</a>) (*<a href="#Writer">Writer</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
				<p>
NewWriter returns a new Writer compressing data at the given level.
Following zlib, levels range from 1 (BestSpeed) to 9 (BestCompression);
higher levels typically run slower but compress more. Level 0
(NoCompression) does not attempt any compression; it only adds the
necessary DEFLATE framing. Level -1 (DefaultCompression) uses the default
compression level.
</p>
<p>
If level is in the range [-1, 9] then the error returned will be nil.
Otherwise the error returned will be non-nil.
</p>

				
			
				
				<h3 id="NewWriterDict">func <a href="/src/pkg/compress/flate/deflate.go?s=12497:12569#L446">NewWriterDict</a></h3>
				<pre>func NewWriterDict(w <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Writer">Writer</a>, level <a href="/pkg/builtin/#int">int</a>, dict []<a href="/pkg/builtin/#byte">byte</a>) (*<a href="#Writer">Writer</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
				<p>
NewWriterDict is like NewWriter but initializes the new
Writer with a preset dictionary.  The returned Writer behaves
as if the dictionary had been written to it without producing
any compressed output.  The compressed data written to w
can only be decompressed by a Reader initialized with the
same dictionary.
</p>

				
			

			
				
				<h3 id="Writer.Close">func (*Writer) <a href="/src/pkg/compress/flate/deflate.go?s=13876:13906#L496">Close</a></h3>
				<pre>func (w *<a href="#Writer">Writer</a>) Close() <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Close flushes and closes the writer.
</p>

				
				
			
				
				<h3 id="Writer.Flush">func (*Writer) <a href="/src/pkg/compress/flate/deflate.go?s=13695:13725#L489">Flush</a></h3>
				<pre>func (w *<a href="#Writer">Writer</a>) Flush() <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Flush flushes any pending compressed data to the underlying writer.
It is useful mainly in compressed network protocols, to ensure that
a remote reader has enough data to reconstruct a packet.
Flush does not return until the data has been written.
If the underlying writer returns an error, Flush returns that error.
</p>
<p>
In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.
</p>

				
				
			
				
				<h3 id="Writer.Write">func (*Writer) <a href="/src/pkg/compress/flate/deflate.go?s=13196:13250#L478">Write</a></h3>
				<pre>func (w *<a href="#Writer">Writer</a>) Write(data []<a href="/pkg/builtin/#byte">byte</a>) (n <a href="/pkg/builtin/#int">int</a>, err <a href="/pkg/builtin/#error">error</a>)</pre>
				<p>
Write writes data to w, which will eventually write the
compressed form of data to its underlying writer.
</p>

				
				
			
		
	

	







<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/playground.js.pagespeed.jm.Up9d4M3oKE.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
<script type="text/javascript">$(function(){if(!$('#topbar').is('.wide'))return;$('<a href="#feedback" id="feedback">Send Feedback</a>').insertAfter('#topbar');$('#feedback').click(function(){userfeedback.api.startFeedback({'productId':'92634','bucket':'godoc'});return false;});});</script>



<script type="text/javascript">(function(){var ga=document.createElement("script");ga.type="text/javascript";ga.async=true;ga.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga,s);})();</script>
<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vo', 'load', '&ft=167&id=1376728645534829', 'http://golang.org/pkg/compress/flate/');</script></body>
</html>

