<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>expvar - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link type="text/css" rel="stylesheet" href="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/A.style.css.pagespeed.cf.NnmSRHJsAc.css">

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

<script type="text/javascript">window.initFuncs=[];</script>
<script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-11222381-2"]);_gaq.push(["_trackPageview"]);</script>
<style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style><link rel="dns-prefetch" href="//ajax.googleapis.com"><link rel="dns-prefetch" href="//1-ps.googleusercontent.com"><link rel="dns-prefetch" href="//www.gstatic.com"><link rel="canonical" href="http://golang.org/pkg/expvar/"/></head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package expvar</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "expvar"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				<p>
Package expvar provides a standardized interface to public variables, such
as operation counters in servers. It exposes these variables via HTTP at
/debug/vars in JSON format.
</p>
<p>
Operations to set or modify these public variables are atomic.
</p>
<p>
In addition to adding the HTTP handler, this package registers the
following variables:
</p>
<pre>cmdline   os.Args
memstats  runtime.Memstats
</pre>
<p>
The package is sometimes only imported for the side effect of
registering its HTTP handler and the above variables.  To use it
this way, link this package into your program:
</p>
<pre>import _ &#34;expvar&#34;
</pre>

			</div>
		</div>
		

		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Do">func Do(f func(KeyValue))</a></dd>
			
				
				<dd><a href="#Publish">func Publish(name string, v Var)</a></dd>
			
			
				
				<dd><a href="#Float">type Float</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFloat">func NewFloat(name string) *Float</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Float.Add">func (v *Float) Add(delta float64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float.Set">func (v *Float) Set(value float64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float.String">func (v *Float) String() string</a></dd>
				
			
				
				<dd><a href="#Func">type Func</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Func.String">func (f Func) String() string</a></dd>
				
			
				
				<dd><a href="#Int">type Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewInt">func NewInt(name string) *Int</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Add">func (v *Int) Add(delta int64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Set">func (v *Int) Set(value int64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.String">func (v *Int) String() string</a></dd>
				
			
				
				<dd><a href="#KeyValue">type KeyValue</a></dd>
				
				
			
				
				<dd><a href="#Map">type Map</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewMap">func NewMap(name string) *Map</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Add">func (v *Map) Add(key string, delta int64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.AddFloat">func (v *Map) AddFloat(key string, delta float64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Do">func (v *Map) Do(f func(KeyValue))</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Get">func (v *Map) Get(key string) Var</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Init">func (v *Map) Init() *Map</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Set">func (v *Map) Set(key string, av Var)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.String">func (v *Map) String() string</a></dd>
				
			
				
				<dd><a href="#String">type String</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewString">func NewString(name string) *String</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#String.Set">func (v *String) Set(value string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#String.String">func (v *String) String() string</a></dd>
				
			
				
				<dd><a href="#Var">type Var</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Get">func Get(name string) Var</a></dd>
				
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="/src/pkg/expvar/expvar.go">expvar.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
		
		
			
			
			<h2 id="Do">func <a href="/src/pkg/expvar/expvar.go?s=5309:5334#L260">Do</a></h2>
			<pre>func Do(f func(<a href="#KeyValue">KeyValue</a>))</pre>
			<p>
Do calls f for each exported variable.
The global variable map is locked during the iteration,
but existing entries may be concurrently updated.
</p>

			
		
			
			
			<h2 id="Publish">func <a href="/src/pkg/expvar/expvar.go?s=4440:4472#L215">Publish</a></h2>
			<pre>func Publish(name <a href="/pkg/builtin/#string">string</a>, v <a href="#Var">Var</a>)</pre>
			<p>
Publish declares a named exported variable. This should be called from a
package&#39;s init function when it creates its Vars. If the name is already
registered then this will log.Panic.
</p>

			
		
		
			
			
			<h2 id="Float">type <a href="/src/pkg/expvar/expvar.go?s=1448:1498#L56">Float</a></h2>
			<pre>type Float struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Float is a 64-bit float variable that satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewFloat">func <a href="/src/pkg/expvar/expvar.go?s=4899:4932#L239">NewFloat</a></h3>
				<pre>func NewFloat(name <a href="/pkg/builtin/#string">string</a>) *<a href="#Float">Float</a></pre>
				
				
			

			
				
				<h3 id="Float.Add">func (*Float) <a href="/src/pkg/expvar/expvar.go?s=1643:1677#L68">Add</a></h3>
				<pre>func (v *<a href="#Float">Float</a>) Add(delta <a href="/pkg/builtin/#float64">float64</a>)</pre>
				<p>
Add adds delta to v.
</p>

				
				
			
				
				<h3 id="Float.Set">func (*Float) <a href="/src/pkg/expvar/expvar.go?s=1755:1789#L75">Set</a></h3>
				<pre>func (v *<a href="#Float">Float</a>) Set(value <a href="/pkg/builtin/#float64">float64</a>)</pre>
				<p>
Set sets v to value.
</p>

				
				
			
				
				<h3 id="Float.String">func (*Float) <a href="/src/pkg/expvar/expvar.go?s=1500:1531#L61">String</a></h3>
				<pre>func (v *<a href="#Float">Float</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Func">type <a href="/src/pkg/expvar/expvar.go?s=4036:4064#L199">Func</a></h2>
			<pre>type Func func() interface{}</pre>
			<p>
Func implements Var by calling the function
and formatting the returned value using JSON.
</p>


			

			

			

			

			
				
				<h3 id="Func.String">func (Func) <a href="/src/pkg/expvar/expvar.go?s=4066:4095#L201">String</a></h3>
				<pre>func (f <a href="#Func">Func</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Int">type <a href="/src/pkg/expvar/expvar.go?s=1057:1103#L32">Int</a></h2>
			<pre>type Int struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Int is a 64-bit integer variable that satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewInt">func <a href="/src/pkg/expvar/expvar.go?s=4821:4850#L233">NewInt</a></h3>
				<pre>func NewInt(name <a href="/pkg/builtin/#string">string</a>) *<a href="#Int">Int</a></pre>
				
				
			

			
				
				<h3 id="Int.Add">func (*Int) <a href="/src/pkg/expvar/expvar.go?s=1211:1241#L43">Add</a></h3>
				<pre>func (v *<a href="#Int">Int</a>) Add(delta <a href="/pkg/builtin/#int64">int64</a>)</pre>
				
				
				
			
				
				<h3 id="Int.Set">func (*Int) <a href="/src/pkg/expvar/expvar.go?s=1295:1325#L49">Set</a></h3>
				<pre>func (v *<a href="#Int">Int</a>) Set(value <a href="/pkg/builtin/#int64">int64</a>)</pre>
				
				
				
			
				
				<h3 id="Int.String">func (*Int) <a href="/src/pkg/expvar/expvar.go?s=1105:1134#L37">String</a></h3>
				<pre>func (v *<a href="#Int">Int</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="KeyValue">type <a href="/src/pkg/expvar/expvar.go?s=2020:2069#L88">KeyValue</a></h2>
			<pre>type KeyValue struct {
        Key   <a href="/pkg/builtin/#string">string</a>
        Value <a href="#Var">Var</a>
}</pre>
			<p>
KeyValue represents a single entry in a Map.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Map">type <a href="/src/pkg/expvar/expvar.go?s=1915:1970#L82">Map</a></h2>
			<pre>type Map struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Map is a string-to-Var map variable that satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewMap">func <a href="/src/pkg/expvar/expvar.go?s=4983:5012#L245">NewMap</a></h3>
				<pre>func NewMap(name <a href="/pkg/builtin/#string">string</a>) *<a href="#Map">Map</a></pre>
				
				
			

			
				
				<h3 id="Map.Add">func (*Map) <a href="/src/pkg/expvar/expvar.go?s=2626:2668#L127">Add</a></h3>
				<pre>func (v *<a href="#Map">Map</a>) Add(key <a href="/pkg/builtin/#string">string</a>, delta <a href="/pkg/builtin/#int64">int64</a>)</pre>
				
				
				
			
				
				<h3 id="Map.AddFloat">func (*Map) <a href="/src/pkg/expvar/expvar.go?s=3031:3080#L148">AddFloat</a></h3>
				<pre>func (v *<a href="#Map">Map</a>) AddFloat(key <a href="/pkg/builtin/#string">string</a>, delta <a href="/pkg/builtin/#float64">float64</a>)</pre>
				<p>
AddFloat adds delta to the *Float value stored under the given map key.
</p>

				
				
			
				
				<h3 id="Map.Do">func (*Map) <a href="/src/pkg/expvar/expvar.go?s=3511:3545#L171">Do</a></h3>
				<pre>func (v *<a href="#Map">Map</a>) Do(f func(<a href="#KeyValue">KeyValue</a>))</pre>
				<p>
Do calls f for each entry in the map.
The map is locked during the iteration,
but existing entries may be concurrently updated.
</p>

				
				
			
				
				<h3 id="Map.Get">func (*Map) <a href="/src/pkg/expvar/expvar.go?s=2442:2475#L115">Get</a></h3>
				<pre>func (v *<a href="#Map">Map</a>) Get(key <a href="/pkg/builtin/#string">string</a>) <a href="#Var">Var</a></pre>
				
				
				
			
				
				<h3 id="Map.Init">func (*Map) <a href="/src/pkg/expvar/expvar.go?s=2373:2398#L110">Init</a></h3>
				<pre>func (v *<a href="#Map">Map</a>) Init() *<a href="#Map">Map</a></pre>
				
				
				
			
				
				<h3 id="Map.Set">func (*Map) <a href="/src/pkg/expvar/expvar.go?s=2534:2571#L121">Set</a></h3>
				<pre>func (v *<a href="#Map">Map</a>) Set(key <a href="/pkg/builtin/#string">string</a>, av <a href="#Var">Var</a>)</pre>
				
				
				
			
				
				<h3 id="Map.String">func (*Map) <a href="/src/pkg/expvar/expvar.go?s=2071:2100#L93">String</a></h3>
				<pre>func (v *<a href="#Map">Map</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="String">type <a href="/src/pkg/expvar/expvar.go?s=3700:3750#L180">String</a></h2>
			<pre>type String struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
String is a string variable, and satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewString">func <a href="/src/pkg/expvar/expvar.go?s=5068:5103#L251">NewString</a></h3>
				<pre>func NewString(name <a href="/pkg/builtin/#string">string</a>) *<a href="#String">String</a></pre>
				
				
			

			
				
				<h3 id="String.Set">func (*String) <a href="/src/pkg/expvar/expvar.go?s=3853:3887#L191">Set</a></h3>
				<pre>func (v *<a href="#String">String</a>) Set(value <a href="/pkg/builtin/#string">string</a>)</pre>
				
				
				
			
				
				<h3 id="String.String">func (*String) <a href="/src/pkg/expvar/expvar.go?s=3752:3784#L185">String</a></h3>
				<pre>func (v *<a href="#String">String</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Var">type <a href="/src/pkg/expvar/expvar.go?s=946:985#L27">Var</a></h2>
			<pre>type Var interface {
        String() <a href="/pkg/builtin/#string">string</a>
}</pre>
			<p>
Var is an abstract type for all exported variables.
</p>


			

			

			

			
				
				<h3 id="Get">func <a href="/src/pkg/expvar/expvar.go?s=4670:4695#L225">Get</a></h3>
				<pre>func Get(name <a href="/pkg/builtin/#string">string</a>) <a href="#Var">Var</a></pre>
				<p>
Get retrieves a named exported variable.
</p>

				
			

			
		
	

	







<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/playground.js.pagespeed.ce.Up9d4M3oKE.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
<script type="text/javascript">$(function(){if(!$('#topbar').is('.wide'))return;$('<a href="#feedback" id="feedback">Send Feedback</a>').insertAfter('#topbar');$('#feedback').click(function(){userfeedback.api.startFeedback({'productId':'92634','bucket':'godoc'});return false;});});</script>



<script type="text/javascript">(function(){var ga=document.createElement("script");ga.type="text/javascript";ga.async=true;ga.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga,s);})();</script>
<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vt', 'load', '&ft=67&id=1376729115112931', 'http://golang.org/pkg/expvar/');</script></body>
</html>

