<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>json - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><style>body{margin:0px;font-family:Helvetica,Arial,sans-serif;font-size:16px}pre,code{font-family:Menlo,monospace;font-size:14px}pre{line-height:18px}pre .comment{color:#060}body{color:#222}a,.exampleHeading .text{color:#375eab;text-decoration:none}a:hover,.exampleHeading .text:hover{text-decoration:underline}p,pre,ul,ol{margin:20px}pre{background-color:#e9e9e9;padding:10px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px;background-position:initial initial;background-repeat:initial initial}h1,h2,h3,h4,.rootHeading{margin:20px 0px;padding:0px;color:#375eab;font-weight:bold}h1{font-size:24px}h2{font-size:20px;background-color:#e0ebf5;padding:2px 5px;background-position:initial initial;background-repeat:initial initial}h3{font-size:20px}h3,h4{margin:20px 5px}h4{font-size:16px}dl{margin:20px}dd{margin:2px 20px}dl,dd{font-size:14px}div#heading{float:left;margin:0px 0px 10px;padding:21px 0px;font-size:20px;font-weight:normal}div#heading a{color:#222;text-decoration:none}div#topbar{background-color:#e0ebf5;height:64px;overflow:hidden;background-position:initial initial;background-repeat:initial initial}body{text-align:center}div#page{width:100%}div#page>.container,div#topbar>.container{text-align:left;margin-left:auto;margin-right:auto;padding:0px 20px;width:900px}div#page.wide>.container,div#topbar.wide>.container{width:auto}div#plusone{float:right;clear:right;margin-top:5px}div#footer{text-align:center;color:#666;font-size:14px;margin:40px 0px}div#menu>a,div#menu>input,div#learn .buttons a,div.play .buttons a,div#blog .read a{padding:10px;text-decoration:none;font-size:16px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px}div#playground .buttons a,div#menu>a,div#menu>input{border:1px solid #375eab}div#playground .buttons a,div#menu>a{color:#fff;background-color:#375eab;background-position:initial initial;background-repeat:initial initial}a#start,div#learn .buttons a,div.play .buttons a,div#blog .read a{color:#222;border:1px solid #375eab;background-color:#e0ebf5;background-position:initial initial;background-repeat:initial initial}div#menu{float:right;min-width:590px;padding:10px 0px;text-align:right}div#menu>a{margin-right:5px;margin-bottom:10px;padding:10px}div#menu>input{position:relative;top:1px;width:60px;background-color:#fff;color:#222;background-position:initial initial;background-repeat:initial initial}div#menu>input.inactive{color:#999}.toggleButton{cursor:pointer}.toggle .collapsed{display:block}.toggle .expanded{display:none}.toggleVisible .collapsed{display:none}.toggleVisible .expanded{display:block}h2{clear:right}div.play{padding:0px 20px 40px}div.play pre,div.play textarea,div.play .lines{padding:0px;margin:0px;font-family:Menlo,monospace;font-size:14px}div.play .input{padding:10px;margin-top:10px;border-top-left-radius:5px;border-top-right-radius:5px;overflow:hidden}div.play .input textarea{width:100%;height:100%;border:none;outline:none;resize:none;overflow:hidden}div#playground .input textarea{overflow:auto;resize:auto}div.play .output{padding:10px;max-height:200px;overflow:auto;border-bottom-right-radius:5px;border-bottom-left-radius:5px;border-top-style:none!important}div.play .output pre{padding:0px;border-top-left-radius:0px;border-top-right-radius:0px;border-bottom-right-radius:0px;border-bottom-left-radius:0px}div.play .input,div.play .input textarea,div.play .output,div.play .output pre{background-color:#ffffd8;background-position:initial initial;background-repeat:initial initial}div.play .input,div.play .output{border:1px solid #375eab}div.play .buttons{float:right;padding:20px 0px 10px;text-align:right}div.play .buttons a{height:16px;margin-left:5px;padding:10px;cursor:pointer}#playgroundButton,div#playground{display:none}div#playground{position:absolute;top:63px;right:20px;padding:0px 10px 10px;z-index:1;text-align:left;background-color:#e0ebf5;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-style:none solid solid;border-right-color:#b0bbc5;border-bottom-color:#b0bbc5;border-left-color:#b0bbc5;border-bottom-left-radius:5px;border-bottom-right-radius:5px;background-position:initial initial;background-repeat:initial initial}div#playground .code{width:520px;height:200px}div#playground .output{height:100px}</style>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

<script type="text/javascript">window.initFuncs=[];</script>
<script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-11222381-2"]);_gaq.push(["_trackPageview"]);</script>
<link rel="canonical" href="http://golang.org/pkg/encoding/json/"/></head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package json</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "encoding/json"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
				<dd><a href="#pkg-examples" class="examplesLink">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				<p>
Package json implements encoding and decoding of JSON objects as defined in
RFC 4627. The mapping between JSON objects and Go values is described
in the documentation for the Marshal and Unmarshal functions.
</p>
<p>
See &#34;JSON and Go&#34; for an introduction to this package:
<a href="http://golang.org/doc/articles/json_and_go.html">http://golang.org/doc/articles/json_and_go.html</a>
</p>

			</div>
		</div>
		

		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Compact">func Compact(dst *bytes.Buffer, src []byte) error</a></dd>
			
				
				<dd><a href="#HTMLEscape">func HTMLEscape(dst *bytes.Buffer, src []byte)</a></dd>
			
				
				<dd><a href="#Indent">func Indent(dst *bytes.Buffer, src []byte, prefix, indent string) error</a></dd>
			
				
				<dd><a href="#Marshal">func Marshal(v interface{}) ([]byte, error)</a></dd>
			
				
				<dd><a href="#MarshalIndent">func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)</a></dd>
			
				
				<dd><a href="#Unmarshal">func Unmarshal(data []byte, v interface{}) error</a></dd>
			
			
				
				<dd><a href="#Decoder">type Decoder</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewDecoder">func NewDecoder(r io.Reader) *Decoder</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Decoder.Buffered">func (dec *Decoder) Buffered() io.Reader</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Decoder.Decode">func (dec *Decoder) Decode(v interface{}) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Decoder.UseNumber">func (dec *Decoder) UseNumber()</a></dd>
				
			
				
				<dd><a href="#Encoder">type Encoder</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewEncoder">func NewEncoder(w io.Writer) *Encoder</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Encoder.Encode">func (enc *Encoder) Encode(v interface{}) error</a></dd>
				
			
				
				<dd><a href="#InvalidUTF8Error">type InvalidUTF8Error</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#InvalidUTF8Error.Error">func (e *InvalidUTF8Error) Error() string</a></dd>
				
			
				
				<dd><a href="#InvalidUnmarshalError">type InvalidUnmarshalError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#InvalidUnmarshalError.Error">func (e *InvalidUnmarshalError) Error() string</a></dd>
				
			
				
				<dd><a href="#Marshaler">type Marshaler</a></dd>
				
				
			
				
				<dd><a href="#MarshalerError">type MarshalerError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#MarshalerError.Error">func (e *MarshalerError) Error() string</a></dd>
				
			
				
				<dd><a href="#Number">type Number</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Number.Float64">func (n Number) Float64() (float64, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Number.Int64">func (n Number) Int64() (int64, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Number.String">func (n Number) String() string</a></dd>
				
			
				
				<dd><a href="#RawMessage">type RawMessage</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#RawMessage.MarshalJSON">func (m *RawMessage) MarshalJSON() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#RawMessage.UnmarshalJSON">func (m *RawMessage) UnmarshalJSON(data []byte) error</a></dd>
				
			
				
				<dd><a href="#SyntaxError">type SyntaxError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#SyntaxError.Error">func (e *SyntaxError) Error() string</a></dd>
				
			
				
				<dd><a href="#UnmarshalFieldError">type UnmarshalFieldError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#UnmarshalFieldError.Error">func (e *UnmarshalFieldError) Error() string</a></dd>
				
			
				
				<dd><a href="#UnmarshalTypeError">type UnmarshalTypeError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#UnmarshalTypeError.Error">func (e *UnmarshalTypeError) Error() string</a></dd>
				
			
				
				<dd><a href="#Unmarshaler">type Unmarshaler</a></dd>
				
				
			
				
				<dd><a href="#UnsupportedTypeError">type UnsupportedTypeError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#UnsupportedTypeError.Error">func (e *UnsupportedTypeError) Error() string</a></dd>
				
			
				
				<dd><a href="#UnsupportedValueError">type UnsupportedValueError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#UnsupportedValueError.Error">func (e *UnsupportedValueError) Error() string</a></dd>
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		
		<div id="pkg-examples">
			<h4>Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_Decoder">Decoder</a></dd>
			
			<dd><a class="exampleLink" href="#example_Marshal">Marshal</a></dd>
			
			<dd><a class="exampleLink" href="#example_Unmarshal">Unmarshal</a></dd>
			
			</dl>
		</div>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="/src/pkg/encoding/json/decode.go">decode.go</a>
			
				<a href="/src/pkg/encoding/json/encode.go">encode.go</a>
			
				<a href="/src/pkg/encoding/json/indent.go">indent.go</a>
			
				<a href="/src/pkg/encoding/json/scanner.go">scanner.go</a>
			
				<a href="/src/pkg/encoding/json/stream.go">stream.go</a>
			
				<a href="/src/pkg/encoding/json/tags.go">tags.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
		
		
			
			
			<h2 id="Compact">func <a href="/src/pkg/encoding/json/indent.go?s=285:334#L1">Compact</a></h2>
			<pre>func Compact(dst *<a href="/pkg/bytes/">bytes</a>.<a href="/pkg/bytes/#Buffer">Buffer</a>, src []<a href="/pkg/builtin/#byte">byte</a>) <a href="/pkg/builtin/#error">error</a></pre>
			<p>
Compact appends to dst the JSON-encoded src with
insignificant space characters elided.
</p>

			
		
			
			
			<h2 id="HTMLEscape">func <a href="/src/pkg/encoding/json/encode.go?s=5998:6044#L148">HTMLEscape</a></h2>
			<pre>func HTMLEscape(dst *<a href="/pkg/bytes/">bytes</a>.<a href="/pkg/bytes/#Buffer">Buffer</a>, src []<a href="/pkg/builtin/#byte">byte</a>)</pre>
			<p>
HTMLEscape appends to dst the JSON-encoded src with &lt;, &gt;, and &amp;
characters inside string literals changed to \u003c, \u003e, \u0026
so that the JSON will be safe to embed inside HTML &lt;script&gt; tags.
For historical reasons, web browsers don&#39;t honor standard HTML
escaping within &lt;script&gt; tags, so an alternative JSON encoding must
be used.
</p>

			
		
			
			
			<h2 id="Indent">func <a href="/src/pkg/encoding/json/indent.go?s=1589:1660#L55">Indent</a></h2>
			<pre>func Indent(dst *<a href="/pkg/bytes/">bytes</a>.<a href="/pkg/bytes/#Buffer">Buffer</a>, src []<a href="/pkg/builtin/#byte">byte</a>, prefix, indent <a href="/pkg/builtin/#string">string</a>) <a href="/pkg/builtin/#error">error</a></pre>
			<p>
Indent appends to dst an indented form of the JSON-encoded src.
Each element in a JSON object or array begins on a new,
indented line beginning with prefix followed by one or more
copies of indent according to the indentation nesting.
The data appended to dst has no trailing newline, to make it easier
to embed inside other formatted JSON data.
</p>

			
		
			
			
			<h2 id="Marshal">func <a href="/src/pkg/encoding/json/encode.go?s=5154:5197#L119">Marshal</a></h2>
			<pre>func Marshal(v interface{}) ([]<a href="/pkg/builtin/#byte">byte</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
			<p>
Marshal returns the JSON encoding of v.
</p>
<p>
Marshal traverses the value v recursively.
If an encountered value implements the Marshaler interface
and is not a nil pointer, Marshal calls its MarshalJSON method
to produce JSON.  The nil pointer exception is not strictly necessary
but mimics a similar, necessary exception in the behavior of
UnmarshalJSON.
</p>
<p>
Otherwise, Marshal uses the following type-dependent default encodings:
</p>
<p>
Boolean values encode as JSON booleans.
</p>
<p>
Floating point, integer, and Number values encode as JSON numbers.
</p>
<p>
String values encode as JSON strings. InvalidUTF8Error will be returned
if an invalid UTF-8 sequence is encountered.
The angle brackets &#34;&lt;&#34; and &#34;&gt;&#34; are escaped to &#34;\u003c&#34; and &#34;\u003e&#34;
to keep some browsers from misinterpreting JSON output as HTML.
</p>
<p>
Array and slice values encode as JSON arrays, except that
[]byte encodes as a base64-encoded string, and a nil slice
encodes as the null JSON object.
</p>
<p>
Struct values encode as JSON objects. Each exported struct field
becomes a member of the object unless
</p>
<pre>- the field&#39;s tag is &#34;-&#34;, or
- the field is empty and its tag specifies the &#34;omitempty&#34; option.
</pre>
<p>
The empty values are false, 0, any
nil pointer or interface value, and any array, slice, map, or string of
length zero. The object&#39;s default key string is the struct field name
but can be specified in the struct field&#39;s tag value. The &#34;json&#34; key in
the struct field&#39;s tag value is the key name, followed by an optional comma
and options. Examples:
</p>
<pre>// Field is ignored by this package.
Field int `json:&#34;-&#34;`

// Field appears in JSON as key &#34;myName&#34;.
Field int `json:&#34;myName&#34;`

// Field appears in JSON as key &#34;myName&#34; and
// the field is omitted from the object if its value is empty,
// as defined above.
Field int `json:&#34;myName,omitempty&#34;`

// Field appears in JSON as key &#34;Field&#34; (the default), but
// the field is skipped if empty.
// Note the leading comma.
Field int `json:&#34;,omitempty&#34;`
</pre>
<p>
The &#34;string&#34; option signals that a field is stored as JSON inside a
JSON-encoded string. It applies only to fields of string, floating point,
or integer types. This extra level of encoding is sometimes used when
communicating with JavaScript programs:
</p>
<pre>Int64String int64 `json:&#34;,string&#34;`
</pre>
<p>
The key name will be used if it&#39;s a non-empty string consisting of
only Unicode letters, digits, dollar signs, percent signs, hyphens,
underscores and slashes.
</p>
<p>
Anonymous struct fields are usually marshaled as if their inner exported fields
were fields in the outer struct, subject to the usual Go visibility rules amended
as described in the next paragraph.
An anonymous struct field with a name given in its JSON tag is treated as
having that name, rather than being anonymous.
</p>
<p>
The Go visibility rules for struct fields are amended for JSON when
deciding which field to marshal or unmarshal. If there are
multiple fields at the same level, and that level is the least
nested (and would therefore be the nesting level selected by the
usual Go rules), the following extra rules apply:
</p>
<p>
1) Of those fields, if any are JSON-tagged, only tagged fields are considered,
even if there are multiple untagged fields that would otherwise conflict.
2) If there is exactly one field (tagged or not according to the first rule), that is selected.
3) Otherwise there are multiple fields, and all are ignored; no error occurs.
</p>
<p>
Handling of anonymous struct fields is new in Go 1.1.
Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of
an anonymous struct field in both current and earlier versions, give the field
a JSON tag of &#34;-&#34;.
</p>
<p>
Map values encode as JSON objects.
The map&#39;s key type must be string; the object keys are used directly
as map keys.
</p>
<p>
Pointer values encode as the value pointed to.
A nil pointer encodes as the null JSON object.
</p>
<p>
Interface values encode as the value contained in the interface.
A nil interface value encodes as the null JSON object.
</p>
<p>
Channel, complex, and function values cannot be encoded in JSON.
Attempting to encode such a value causes Marshal to return
an UnsupportedTypeError.
</p>
<p>
JSON cannot represent cyclic data structures and Marshal does not
handle them.  Passing cyclic structures to Marshal will result in
an infinite recursion.
</p>

			<div id="example_Marshal" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;os&#34;
)

func main() {
	type ColorGroup struct {
		ID     int
		Name   string
		Colors []string
	}
	group := ColorGroup{
		ID:     1,
		Name:   &#34;Reds&#34;,
		Colors: []string{&#34;Crimson&#34;, &#34;Red&#34;, &#34;Ruby&#34;, &#34;Maroon&#34;},
	}
	b, err := json.Marshal(group)
	if err != nil {
		fmt.Println(&#34;error:&#34;, err)
	}
	os.Stdout.Write(b)
}
</textarea></div>
				<div class="output"><pre>{&#34;ID&#34;:1,&#34;Name&#34;:&#34;Reds&#34;,&#34;Colors&#34;:[&#34;Crimson&#34;,&#34;Red&#34;,&#34;Ruby&#34;,&#34;Maroon&#34;]}
</pre></div>
				<div class="buttons">
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
				</div>
			</div>
		
	</div>
</div>

		
			
			
			<h2 id="MarshalIndent">func <a href="/src/pkg/encoding/json/encode.go?s=5380:5452#L129">MarshalIndent</a></h2>
			<pre>func MarshalIndent(v interface{}, prefix, indent <a href="/pkg/builtin/#string">string</a>) ([]<a href="/pkg/builtin/#byte">byte</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
			<p>
MarshalIndent is like Marshal but applies Indent to format the output.
</p>

			
		
			
			
			<h2 id="Unmarshal">func <a href="/src/pkg/encoding/json/decode.go?s=2221:2269#L53">Unmarshal</a></h2>
			<pre>func Unmarshal(data []<a href="/pkg/builtin/#byte">byte</a>, v interface{}) <a href="/pkg/builtin/#error">error</a></pre>
			<p>
Unmarshal parses the JSON-encoded data and stores the result
in the value pointed to by v.
</p>
<p>
Unmarshal uses the inverse of the encodings that
Marshal uses, allocating maps, slices, and pointers as necessary,
with the following additional rules:
</p>
<p>
To unmarshal JSON into a pointer, Unmarshal first handles the case of
the JSON being the JSON literal null.  In that case, Unmarshal sets
the pointer to nil.  Otherwise, Unmarshal unmarshals the JSON into
the value pointed at by the pointer.  If the pointer is nil, Unmarshal
allocates a new value for it to point to.
</p>
<p>
To unmarshal JSON into a struct, Unmarshal matches incoming object
keys to the keys used by Marshal (either the struct field name or its tag),
preferring an exact match but also accepting a case-insensitive match.
</p>
<p>
To unmarshal JSON into an interface value, Unmarshal unmarshals
the JSON into the concrete value contained in the interface value.
If the interface value is nil, that is, has no concrete value stored in it,
Unmarshal stores one of these in the interface value:
</p>
<pre>bool, for JSON booleans
float64, for JSON numbers
string, for JSON strings
[]interface{}, for JSON arrays
map[string]interface{}, for JSON objects
nil for JSON null
</pre>
<p>
If a JSON value is not appropriate for a given target type,
or if a JSON number overflows the target type, Unmarshal
skips that field and completes the unmarshalling as best it can.
If no more serious errors are encountered, Unmarshal returns
an UnmarshalTypeError describing the earliest such error.
</p>
<p>
When unmarshaling quoted strings, invalid UTF-8 or
invalid UTF-16 surrogate pairs are not treated as an error.
Instead, they are replaced by the Unicode replacement
character U+FFFD.
</p>

			<div id="example_Unmarshal" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	&#34;encoding/json&#34;
	&#34;fmt&#34;
)

func main() {
	var jsonBlob = []byte(`[
		{&#34;Name&#34;: &#34;Platypus&#34;, &#34;Order&#34;: &#34;Monotremata&#34;},
		{&#34;Name&#34;: &#34;Quoll&#34;,    &#34;Order&#34;: &#34;Dasyuromorphia&#34;}
	]`)
	type Animal struct {
		Name  string
		Order string
	}
	var animals []Animal
	err := json.Unmarshal(jsonBlob, &amp;animals)
	if err != nil {
		fmt.Println(&#34;error:&#34;, err)
	}
	fmt.Printf(&#34;%+v&#34;, animals)
}
</textarea></div>
				<div class="output"><pre>[{Name:Platypus Order:Monotremata} {Name:Quoll Order:Dasyuromorphia}]
</pre></div>
				<div class="buttons">
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
				</div>
			</div>
		
	</div>
</div>

		
		
			
			
			<h2 id="Decoder">type <a href="/src/pkg/encoding/json/stream.go?s=278:374#L4">Decoder</a></h2>
			<pre>type Decoder struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Decoder reads and decodes JSON objects from an input stream.
</p>


			

			

			<div id="example_Decoder" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
		<p>This example uses a Decoder to decode a stream of distinct JSON values.
</p>
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;io&#34;
	&#34;log&#34;
	&#34;strings&#34;
)

func main() {
	const jsonStream = `
		{&#34;Name&#34;: &#34;Ed&#34;, &#34;Text&#34;: &#34;Knock knock.&#34;}
		{&#34;Name&#34;: &#34;Sam&#34;, &#34;Text&#34;: &#34;Who&#39;s there?&#34;}
		{&#34;Name&#34;: &#34;Ed&#34;, &#34;Text&#34;: &#34;Go fmt.&#34;}
		{&#34;Name&#34;: &#34;Sam&#34;, &#34;Text&#34;: &#34;Go fmt who?&#34;}
		{&#34;Name&#34;: &#34;Ed&#34;, &#34;Text&#34;: &#34;Go fmt yourself!&#34;}
	`
	type Message struct {
		Name, Text string
	}
	dec := json.NewDecoder(strings.NewReader(jsonStream))
	for {
		var m Message
		if err := dec.Decode(&amp;m); err == io.EOF {
			break
		} else if err != nil {
			log.Fatal(err)
		}
		fmt.Printf(&#34;%s: %s\n&#34;, m.Name, m.Text)
	}
}
</textarea></div>
				<div class="output"><pre>Ed: Knock knock.
Sam: Who&#39;s there?
Ed: Go fmt.
Sam: Go fmt who?
Ed: Go fmt yourself!
</pre></div>
				<div class="buttons">
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
				</div>
			</div>
		
	</div>
</div>


			
				
				<h3 id="NewDecoder">func <a href="/src/pkg/encoding/json/stream.go?s=540:577#L16">NewDecoder</a></h3>
				<pre>func NewDecoder(r <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Reader">Reader</a>) *<a href="#Decoder">Decoder</a></pre>
				<p>
NewDecoder returns a new decoder that reads from r.
</p>
<p>
The decoder introduces its own buffering and may
read data from r beyond the JSON values requested.
</p>

				
			

			
				
				<h3 id="Decoder.Buffered">func (*Decoder) <a href="/src/pkg/encoding/json/stream.go?s=1592:1632#L54">Buffered</a></h3>
				<pre>func (dec *<a href="#Decoder">Decoder</a>) Buffered() <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Reader">Reader</a></pre>
				<p>
Buffered returns a reader of the data remaining in the Decoder&#39;s
buffer. The reader is valid until the next call to Decode.
</p>

				
				
			
				
				<h3 id="Decoder.Decode">func (*Decoder) <a href="/src/pkg/encoding/json/stream.go?s=989:1036#L29">Decode</a></h3>
				<pre>func (dec *<a href="#Decoder">Decoder</a>) Decode(v interface{}) <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Decode reads the next JSON-encoded value from its
input and stores it in the value pointed to by v.
</p>
<p>
See the documentation for Unmarshal for details about
the conversion of JSON into a Go value.
</p>

				
				
			
				
				<h3 id="Decoder.UseNumber">func (*Decoder) <a href="/src/pkg/encoding/json/stream.go?s=720:751#L22">UseNumber</a></h3>
				<pre>func (dec *<a href="#Decoder">Decoder</a>) UseNumber()</pre>
				<p>
UseNumber causes the Decoder to unmarshal a number into an interface{} as a
Number instead of as a float64.
</p>

				
				
			
		
			
			
			<h2 id="Encoder">type <a href="/src/pkg/encoding/json/stream.go?s=3328:3394#L130">Encoder</a></h2>
			<pre>type Encoder struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
An Encoder writes JSON objects to an output stream.
</p>


			

			

			

			
				
				<h3 id="NewEncoder">func <a href="/src/pkg/encoding/json/stream.go?s=3450:3487#L137">NewEncoder</a></h3>
				<pre>func NewEncoder(w <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Writer">Writer</a>) *<a href="#Encoder">Encoder</a></pre>
				<p>
NewEncoder returns a new encoder that writes to w.
</p>

				
			

			
				
				<h3 id="Encoder.Encode">func (*Encoder) <a href="/src/pkg/encoding/json/stream.go?s=3673:3720#L145">Encode</a></h3>
				<pre>func (enc *<a href="#Encoder">Encoder</a>) Encode(v interface{}) <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Encode writes the JSON encoding of v to the connection.
</p>
<p>
See the documentation for Marshal for details about the
conversion of Go values to JSON.
</p>

				
				
			
		
			
			
			<h2 id="InvalidUTF8Error">type <a href="/src/pkg/encoding/json/encode.go?s=7150:7240#L195">InvalidUTF8Error</a></h2>
			<pre>type InvalidUTF8Error struct {
        S <a href="/pkg/builtin/#string">string</a> <span class="comment">// the whole string value that caused the error</span>
}</pre>
			<p>
An InvalidUTF8Error is returned by Marshal when attempting
to encode a string value with invalid UTF-8 sequences.
</p>


			

			

			

			

			
				
				<h3 id="InvalidUTF8Error.Error">func (*InvalidUTF8Error) <a href="/src/pkg/encoding/json/encode.go?s=7242:7283#L199">Error</a></h3>
				<pre>func (e *<a href="#InvalidUTF8Error">InvalidUTF8Error</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="InvalidUnmarshalError">type <a href="/src/pkg/encoding/json/decode.go?s=3883:3939#L102">InvalidUnmarshalError</a></h2>
			<pre>type InvalidUnmarshalError struct {
        Type <a href="/pkg/reflect/">reflect</a>.<a href="/pkg/reflect/#Type">Type</a>
}</pre>
			<p>
An InvalidUnmarshalError describes an invalid argument passed to Unmarshal.
(The argument to Unmarshal must be a non-nil pointer.)
</p>


			

			

			

			

			
				
				<h3 id="InvalidUnmarshalError.Error">func (*InvalidUnmarshalError) <a href="/src/pkg/encoding/json/decode.go?s=3941:3987#L106">Error</a></h3>
				<pre>func (e *<a href="#InvalidUnmarshalError">InvalidUnmarshalError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Marshaler">type <a href="/src/pkg/encoding/json/encode.go?s=6532:6591#L170">Marshaler</a></h2>
			<pre>type Marshaler interface {
        MarshalJSON() ([]<a href="/pkg/builtin/#byte">byte</a>, <a href="/pkg/builtin/#error">error</a>)
}</pre>
			<p>
Marshaler is the interface implemented by objects that
can marshal themselves into valid JSON.
</p>


			

			

			

			

			
		
			
			
			<h2 id="MarshalerError">type <a href="/src/pkg/encoding/json/encode.go?s=7352:7413#L203">MarshalerError</a></h2>
			<pre>type MarshalerError struct {
        Type <a href="/pkg/reflect/">reflect</a>.<a href="/pkg/reflect/#Type">Type</a>
        Err  <a href="/pkg/builtin/#error">error</a>
}</pre>
			

			

			

			

			

			
				
				<h3 id="MarshalerError.Error">func (*MarshalerError) <a href="/src/pkg/encoding/json/encode.go?s=7415:7454#L208">Error</a></h3>
				<pre>func (e *<a href="#MarshalerError">MarshalerError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Number">type <a href="/src/pkg/encoding/json/decode.go?s=4745:4763#L140">Number</a></h2>
			<pre>type Number <a href="/pkg/builtin/#string">string</a></pre>
			<p>
A Number represents a JSON number literal.
</p>


			

			

			

			

			
				
				<h3 id="Number.Float64">func (Number) <a href="/src/pkg/encoding/json/decode.go?s=4913:4955#L146">Float64</a></h3>
				<pre>func (n <a href="#Number">Number</a>) Float64() (<a href="/pkg/builtin/#float64">float64</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
				<p>
Float64 returns the number as a float64.
</p>

				
				
			
				
				<h3 id="Number.Int64">func (Number) <a href="/src/pkg/encoding/json/decode.go?s=5044:5082#L151">Int64</a></h3>
				<pre>func (n <a href="#Number">Number</a>) Int64() (<a href="/pkg/builtin/#int64">int64</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
				<p>
Int64 returns the number as an int64.
</p>

				
				
			
				
				<h3 id="Number.String">func (Number) <a href="/src/pkg/encoding/json/decode.go?s=4815:4846#L143">String</a></h3>
				<pre>func (n <a href="#Number">Number</a>) String() <a href="/pkg/builtin/#string">string</a></pre>
				<p>
String returns the literal text of the number.
</p>

				
				
			
		
			
			
			<h2 id="RawMessage">type <a href="/src/pkg/encoding/json/stream.go?s=4357:4379#L172">RawMessage</a></h2>
			<pre>type RawMessage []<a href="/pkg/builtin/#byte">byte</a></pre>
			<p>
RawMessage is a raw encoded JSON object.
It implements Marshaler and Unmarshaler and can
be used to delay JSON decoding or precompute a JSON encoding.
</p>


			

			

			

			

			
				
				<h3 id="RawMessage.MarshalJSON">func (*RawMessage) <a href="/src/pkg/encoding/json/stream.go?s=4434:4484#L175">MarshalJSON</a></h3>
				<pre>func (m *<a href="#RawMessage">RawMessage</a>) MarshalJSON() ([]<a href="/pkg/builtin/#byte">byte</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
				<p>
MarshalJSON returns *m as the JSON encoding of m.
</p>

				
				
			
				
				<h3 id="RawMessage.UnmarshalJSON">func (*RawMessage) <a href="/src/pkg/encoding/json/stream.go?s=4550:4603#L180">UnmarshalJSON</a></h3>
				<pre>func (m *<a href="#RawMessage">RawMessage</a>) UnmarshalJSON(data []<a href="/pkg/builtin/#byte">byte</a>) <a href="/pkg/builtin/#error">error</a></pre>
				<p>
UnmarshalJSON sets *m to a copy of data.
</p>

				
				
			
		
			
			
			<h2 id="SyntaxError">type <a href="/src/pkg/encoding/json/scanner.go?s=1613:1739#L47">SyntaxError</a></h2>
			<pre>type SyntaxError struct {
        Offset <a href="/pkg/builtin/#int64">int64</a> <span class="comment">// error occurred after reading Offset bytes</span>
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A SyntaxError is a description of a JSON syntax error.
</p>


			

			

			

			

			
				
				<h3 id="SyntaxError.Error">func (*SyntaxError) <a href="/src/pkg/encoding/json/scanner.go?s=1741:1777#L52">Error</a></h3>
				<pre>func (e *<a href="#SyntaxError">SyntaxError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="UnmarshalFieldError">type <a href="/src/pkg/encoding/json/decode.go?s=3455:3551#L90">UnmarshalFieldError</a></h2>
			<pre>type UnmarshalFieldError struct {
        Key   <a href="/pkg/builtin/#string">string</a>
        Type  <a href="/pkg/reflect/">reflect</a>.<a href="/pkg/reflect/#Type">Type</a>
        Field <a href="/pkg/reflect/">reflect</a>.<a href="/pkg/reflect/#StructField">StructField</a>
}</pre>
			<p>
An UnmarshalFieldError describes a JSON object key that
led to an unexported (and therefore unwritable) struct field.
(No longer used; kept for compatibility.)
</p>


			

			

			

			

			
				
				<h3 id="UnmarshalFieldError.Error">func (*UnmarshalFieldError) <a href="/src/pkg/encoding/json/decode.go?s=3553:3597#L96">Error</a></h3>
				<pre>func (e *<a href="#UnmarshalFieldError">UnmarshalFieldError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="UnmarshalTypeError">type <a href="/src/pkg/encoding/json/decode.go?s=2963:3145#L78">UnmarshalTypeError</a></h2>
			<pre>type UnmarshalTypeError struct {
        Value <a href="/pkg/builtin/#string">string</a>       <span class="comment">// description of JSON value - &#34;bool&#34;, &#34;array&#34;, &#34;number -5&#34;</span>
        Type  <a href="/pkg/reflect/">reflect</a>.<a href="/pkg/reflect/#Type">Type</a> <span class="comment">// type of Go value it could not be assigned to</span>
}</pre>
			<p>
An UnmarshalTypeError describes a JSON value that was
not appropriate for a value of a specific Go type.
</p>


			

			

			

			

			
				
				<h3 id="UnmarshalTypeError.Error">func (*UnmarshalTypeError) <a href="/src/pkg/encoding/json/decode.go?s=3147:3190#L83">Error</a></h3>
				<pre>func (e *<a href="#UnmarshalTypeError">UnmarshalTypeError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="Unmarshaler">type <a href="/src/pkg/encoding/json/decode.go?s=2791:2850#L72">Unmarshaler</a></h2>
			<pre>type Unmarshaler interface {
        UnmarshalJSON([]<a href="/pkg/builtin/#byte">byte</a>) <a href="/pkg/builtin/#error">error</a>
}</pre>
			<p>
Unmarshaler is the interface implemented by objects
that can unmarshal a JSON description of themselves.
The input can be assumed to be a valid encoding of
a JSON value. UnmarshalJSON must copy the JSON data
if it wishes to retain the data after returning.
</p>


			

			

			

			

			
		
			
			
			<h2 id="UnsupportedTypeError">type <a href="/src/pkg/encoding/json/encode.go?s=6699:6754#L176">UnsupportedTypeError</a></h2>
			<pre>type UnsupportedTypeError struct {
        Type <a href="/pkg/reflect/">reflect</a>.<a href="/pkg/reflect/#Type">Type</a>
}</pre>
			<p>
An UnsupportedTypeError is returned by Marshal when attempting
to encode an unsupported value type.
</p>


			

			

			

			

			
				
				<h3 id="UnsupportedTypeError.Error">func (*UnsupportedTypeError) <a href="/src/pkg/encoding/json/encode.go?s=6756:6801#L180">Error</a></h3>
				<pre>func (e *<a href="#UnsupportedTypeError">UnsupportedTypeError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
			
			
			<h2 id="UnsupportedValueError">type <a href="/src/pkg/encoding/json/encode.go?s=6860:6932#L184">UnsupportedValueError</a></h2>
			<pre>type UnsupportedValueError struct {
        Value <a href="/pkg/reflect/">reflect</a>.<a href="/pkg/reflect/#Value">Value</a>
        Str   <a href="/pkg/builtin/#string">string</a>
}</pre>
			

			

			

			

			

			
				
				<h3 id="UnsupportedValueError.Error">func (*UnsupportedValueError) <a href="/src/pkg/encoding/json/encode.go?s=6934:6980#L189">Error</a></h3>
				<pre>func (e *<a href="#UnsupportedValueError">UnsupportedValueError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre>
				
				
				
			
		
	

	







<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/playground.js.pagespeed.jm.Up9d4M3oKE.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
<script type="text/javascript">$(function(){if(!$('#topbar').is('.wide'))return;$('<a href="#feedback" id="feedback">Send Feedback</a>').insertAfter('#topbar');$('#feedback').click(function(){userfeedback.api.startFeedback({'productId':'92634','bucket':'godoc'});return false;});});</script>
<style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style>


<script type="text/javascript">(function(){var ga=document.createElement("script");ga.type="text/javascript";ga.async=true;ga.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga,s);})();</script>
<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vo', 'load', '&ft=131&s_ttfb=142&id=1376729060540346', 'http://golang.org/pkg/encoding/json/');</script></body>
</html>

<noscript class="psa_add_styles"><link type="text/css" rel="stylesheet" href="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/A.style.css.pagespeed.cf.NnmSRHJsAc.css"><style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style></noscript><script pagespeed_no_defer="">var stylesAdded=false;var addAllStyles=function(){if(stylesAdded)return;stylesAdded=true;var div=document.createElement("div");var styleText="";var styleElements=document.getElementsByClassName("psa_add_styles");for(var i=0;i<styleElements.length;++i){styleText+=styleElements[i].textContent||styleElements[i].innerHTML||styleElements[i].data||"";}div.innerHTML=styleText;document.body.appendChild(div);};if(window.addEventListener){document.addEventListener("DOMContentLoaded",addAllStyles,false);window.addEventListener("load",addAllStyles,false);}else if(window.attachEvent){window.attachEvent("onload",addAllStyles);}else{window.onload=addAllStyles;}window['pagespeed']=window['pagespeed']||{};window['pagespeed']['criticalCss']={'total_critical_inlined_size':5177,'total_original_external_size':6889,'total_overhead_size':5553,'num_replaced_links':1,'num_unreplaced_links':0};</script>