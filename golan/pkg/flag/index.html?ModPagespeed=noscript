<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>flag - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><style>body{margin:0px;font-family:Helvetica,Arial,sans-serif;font-size:16px}pre,code{font-family:Menlo,monospace;font-size:14px}pre{line-height:18px}pre .comment{color:#060}body{color:#222}a,.exampleHeading .text{color:#375eab;text-decoration:none}a:hover,.exampleHeading .text:hover{text-decoration:underline}p,pre,ul,ol{margin:20px}pre{background-color:#e9e9e9;padding:10px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px;background-position:initial initial;background-repeat:initial initial}h1,h2,h3,h4,.rootHeading{margin:20px 0px;padding:0px;color:#375eab;font-weight:bold}h1{font-size:24px}h2{font-size:20px;background-color:#e0ebf5;padding:2px 5px;background-position:initial initial;background-repeat:initial initial}h3{font-size:20px}h3,h4{margin:20px 5px}h4{font-size:16px}dl{margin:20px}dd{margin:2px 20px}dl,dd{font-size:14px}table.dir th{text-align:left}table.dir td{word-wrap:break-word;vertical-align:top}div#page.wide table.dir td.name{white-space:nowrap}div#heading{float:left;margin:0px 0px 10px;padding:21px 0px;font-size:20px;font-weight:normal}div#heading a{color:#222;text-decoration:none}div#topbar{background-color:#e0ebf5;height:64px;overflow:hidden;background-position:initial initial;background-repeat:initial initial}body{text-align:center}div#page{width:100%}div#page>.container,div#topbar>.container{text-align:left;margin-left:auto;margin-right:auto;padding:0px 20px;width:900px}div#page.wide>.container,div#topbar.wide>.container{width:auto}div#plusone{float:right;clear:right;margin-top:5px}div#footer{text-align:center;color:#666;font-size:14px;margin:40px 0px}div#menu>a,div#menu>input,div#learn .buttons a,div.play .buttons a,div#blog .read a{padding:10px;text-decoration:none;font-size:16px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px}div#playground .buttons a,div#menu>a,div#menu>input{border:1px solid #375eab}div#playground .buttons a,div#menu>a{color:#fff;background-color:#375eab;background-position:initial initial;background-repeat:initial initial}a#start,div#learn .buttons a,div.play .buttons a,div#blog .read a{color:#222;border:1px solid #375eab;background-color:#e0ebf5;background-position:initial initial;background-repeat:initial initial}div#menu{float:right;min-width:590px;padding:10px 0px;text-align:right}div#menu>a{margin-right:5px;margin-bottom:10px;padding:10px}div#menu>input{position:relative;top:1px;width:60px;background-color:#fff;color:#222;background-position:initial initial;background-repeat:initial initial}div#menu>input.inactive{color:#999}.toggleButton{cursor:pointer}.toggleVisible .collapsed{display:none}.toggleVisible .expanded{display:block}h2{clear:right}div.play{padding:0px 20px 40px}div.play pre,div.play textarea,div.play .lines{padding:0px;margin:0px;font-family:Menlo,monospace;font-size:14px}div.play .input{padding:10px;margin-top:10px;border-top-left-radius:5px;border-top-right-radius:5px;overflow:hidden}div.play .input textarea{width:100%;height:100%;border:none;outline:none;resize:none;overflow:hidden}div#playground .input textarea{overflow:auto;resize:auto}div.play .output{padding:10px;max-height:200px;overflow:auto;border-bottom-right-radius:5px;border-bottom-left-radius:5px;border-top-style:none!important}div.play .input,div.play .input textarea,div.play .output,div.play .output pre{background-color:#ffffd8;background-position:initial initial;background-repeat:initial initial}div.play .input,div.play .output{border:1px solid #375eab}div.play .buttons{float:right;padding:20px 0px 10px;text-align:right}div.play .buttons a{height:16px;margin-left:5px;padding:10px;cursor:pointer}#playgroundButton,div#playground{display:none}div#playground{position:absolute;top:63px;right:20px;padding:0px 10px 10px;z-index:1;text-align:left;background-color:#e0ebf5;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-style:none solid solid;border-right-color:#b0bbc5;border-bottom-color:#b0bbc5;border-left-color:#b0bbc5;border-bottom-left-radius:5px;border-bottom-right-radius:5px;background-position:initial initial;background-repeat:initial initial}div#playground .code{width:520px;height:200px}div#playground .output{height:100px}</style>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

<script type="text/javascript">window.initFuncs=[];</script>
<script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-11222381-2"]);_gaq.push(["_trackPageview"]);</script>
<link rel="dns-prefetch" href="//ajax.googleapis.com"><link rel="dns-prefetch" href="//1-ps.googleusercontent.com"><link rel="dns-prefetch" href="//www.gstatic.com"><link rel="canonical" href="http://golang.org/pkg/flag/"/></head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package flag</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "flag"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
				<dd><a href="#pkg-examples" class="examplesLink">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				<p>
Package flag implements command-line flag parsing.
</p>
<p>
Usage:
</p>
<p>
Define flags using flag.String(), Bool(), Int(), etc.
</p>
<p>
This declares an integer flag, -flagname, stored in the pointer ip, with type *int.
</p>
<pre>import &#34;flag&#34;
var ip = flag.Int(&#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)
</pre>
<p>
If you like, you can bind the flag to a variable using the Var() functions.
</p>
<pre>var flagvar int
func init() {
	flag.IntVar(&amp;flagvar, &#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)
}
</pre>
<p>
Or you can create custom flags that satisfy the Value interface (with
pointer receivers) and couple them to flag parsing by
</p>
<pre>flag.Var(&amp;flagVal, &#34;name&#34;, &#34;help message for flagname&#34;)
</pre>
<p>
For such flags, the default value is just the initial value of the variable.
</p>
<p>
After all flags are defined, call
</p>
<pre>flag.Parse()
</pre>
<p>
to parse the command line into the defined flags.
</p>
<p>
Flags may then be used directly. If you&#39;re using the flags themselves,
they are all pointers; if you bind to variables, they&#39;re values.
</p>
<pre>fmt.Println(&#34;ip has value &#34;, *ip)
fmt.Println(&#34;flagvar has value &#34;, flagvar)
</pre>
<p>
After parsing, the arguments after the flag are available as the
slice flag.Args() or individually as flag.Arg(i).
The arguments are indexed from 0 through flag.NArg()-1.
</p>
<p>
Command line flag syntax:
</p>
<pre>-flag
-flag=x
-flag x  // non-boolean flags only
</pre>
<p>
One or two minus signs may be used; they are equivalent.
The last form is not permitted for boolean flags because the
meaning of the command
</p>
<pre>cmd -x *
</pre>
<p>
will change if there is a file called 0, false, etc.  You must
use the -flag=false form to turn off a boolean flag.
</p>
<p>
Flag parsing stops just before the first non-flag argument
(&#34;-&#34; is a non-flag argument) or after the terminator &#34;--&#34;.
</p>
<p>
Integer flags accept 1234, 0664, 0x1234 and may be negative.
Boolean flags may be 1, 0, t, f, true, false, TRUE, FALSE, True, False.
Duration flags accept any input valid for time.ParseDuration.
</p>
<p>
The default set of command-line flags is controlled by
top-level functions.  The FlagSet type allows one to define
independent sets of flags, such as to implement subcommands
in a command-line interface. The methods of FlagSet are
analogous to the top-level functions for the command-line
flag set.
</p>

			</div>
		</div>
		<div id="example_" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">// These examples demonstrate more intricate uses of the flag package.
package main

import (
	&#34;errors&#34;
	&#34;flag&#34;
	&#34;fmt&#34;
	&#34;strings&#34;
	&#34;time&#34;
)

// Example 1: A single string flag called &#34;species&#34; with default value &#34;gopher&#34;.
var species = flag.String(&#34;species&#34;, &#34;gopher&#34;, &#34;the species we are studying&#34;)

// Example 2: Two flags sharing a variable, so we can have a shorthand.
// The order of initialization is undefined, so make sure both use the
// same default value. They must be set up with an init function.
var gopherType string

func init() {
	const (
		defaultGopher = &#34;pocket&#34;
		usage         = &#34;the variety of gopher&#34;
	)
	flag.StringVar(&amp;gopherType, &#34;gopher_type&#34;, defaultGopher, usage)
	flag.StringVar(&amp;gopherType, &#34;g&#34;, defaultGopher, usage+&#34; (shorthand)&#34;)
}

// Example 3: A user-defined flag type, a slice of durations.
type interval []time.Duration

// String is the method to format the flag&#39;s value, part of the flag.Value interface.
// The String method&#39;s output will be used in diagnostics.
func (i *interval) String() string {
	return fmt.Sprint(*i)
}

// Set is the method to set the flag value, part of the flag.Value interface.
// Set&#39;s argument is a string to be parsed to set the flag.
// It&#39;s a comma-separated list, so we split it.
func (i *interval) Set(value string) error {
	// If we wanted to allow the flag to be set multiple times,
	// accumulating values, we would delete this if statement.
	// That would permit usages such as
	//	-deltaT 10s -deltaT 15s
	// and other combinations.
	if len(*i) &gt; 0 {
		return errors.New(&#34;interval flag already set&#34;)
	}
	for _, dt := range strings.Split(value, &#34;,&#34;) {
		duration, err := time.ParseDuration(dt)
		if err != nil {
			return err
		}
		*i = append(*i, duration)
	}
	return nil
}

// Define a flag to accumulate durations. Because it has a special type,
// we need to use the Var function and therefore create the flag during
// init.

var intervalFlag interval

func init() {
	// Tie the command-line flag to the intervalFlag variable and
	// set a usage message.
	flag.Var(&amp;intervalFlag, &#34;deltaT&#34;, &#34;comma-separated list of intervals to use between events&#34;)
}

func main() {
	// All the interesting pieces are with the variables declared above, but
	// to enable the flag package to see the flags defined there, one must
	// execute, typically at the start of main (not init!):
	//	flag.Parse()
	// We don&#39;t run it here because this is not a main function and
	// the testing suite has already parsed the flags.
}
</textarea></div>
				<div class="output"><pre></pre></div>
				<div class="buttons">
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
				</div>
			</div>
		
	</div>
</div>


		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#pkg-variables">Variables</a></dd>
			
			
				
				<dd><a href="#Arg">func Arg(i int) string</a></dd>
			
				
				<dd><a href="#Args">func Args() []string</a></dd>
			
				
				<dd><a href="#Bool">func Bool(name string, value bool, usage string) *bool</a></dd>
			
				
				<dd><a href="#BoolVar">func BoolVar(p *bool, name string, value bool, usage string)</a></dd>
			
				
				<dd><a href="#Duration">func Duration(name string, value time.Duration, usage string) *time.Duration</a></dd>
			
				
				<dd><a href="#DurationVar">func DurationVar(p *time.Duration, name string, value time.Duration, usage string)</a></dd>
			
				
				<dd><a href="#Float64">func Float64(name string, value float64, usage string) *float64</a></dd>
			
				
				<dd><a href="#Float64Var">func Float64Var(p *float64, name string, value float64, usage string)</a></dd>
			
				
				<dd><a href="#Int">func Int(name string, value int, usage string) *int</a></dd>
			
				
				<dd><a href="#Int64">func Int64(name string, value int64, usage string) *int64</a></dd>
			
				
				<dd><a href="#Int64Var">func Int64Var(p *int64, name string, value int64, usage string)</a></dd>
			
				
				<dd><a href="#IntVar">func IntVar(p *int, name string, value int, usage string)</a></dd>
			
				
				<dd><a href="#NArg">func NArg() int</a></dd>
			
				
				<dd><a href="#NFlag">func NFlag() int</a></dd>
			
				
				<dd><a href="#Parse">func Parse()</a></dd>
			
				
				<dd><a href="#Parsed">func Parsed() bool</a></dd>
			
				
				<dd><a href="#PrintDefaults">func PrintDefaults()</a></dd>
			
				
				<dd><a href="#Set">func Set(name, value string) error</a></dd>
			
				
				<dd><a href="#String">func String(name string, value string, usage string) *string</a></dd>
			
				
				<dd><a href="#StringVar">func StringVar(p *string, name string, value string, usage string)</a></dd>
			
				
				<dd><a href="#Uint">func Uint(name string, value uint, usage string) *uint</a></dd>
			
				
				<dd><a href="#Uint64">func Uint64(name string, value uint64, usage string) *uint64</a></dd>
			
				
				<dd><a href="#Uint64Var">func Uint64Var(p *uint64, name string, value uint64, usage string)</a></dd>
			
				
				<dd><a href="#UintVar">func UintVar(p *uint, name string, value uint, usage string)</a></dd>
			
				
				<dd><a href="#Var">func Var(value Value, name string, usage string)</a></dd>
			
				
				<dd><a href="#Visit">func Visit(fn func(*Flag))</a></dd>
			
				
				<dd><a href="#VisitAll">func VisitAll(fn func(*Flag))</a></dd>
			
			
				
				<dd><a href="#ErrorHandling">type ErrorHandling</a></dd>
				
				
			
				
				<dd><a href="#Flag">type Flag</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Lookup">func Lookup(name string) *Flag</a></dd>
				
				
			
				
				<dd><a href="#FlagSet">type FlagSet</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFlagSet">func NewFlagSet(name string, errorHandling ErrorHandling) *FlagSet</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Arg">func (f *FlagSet) Arg(i int) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Args">func (f *FlagSet) Args() []string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Bool">func (f *FlagSet) Bool(name string, value bool, usage string) *bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.BoolVar">func (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Duration">func (f *FlagSet) Duration(name string, value time.Duration, usage string) *time.Duration</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.DurationVar">func (f *FlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Float64">func (f *FlagSet) Float64(name string, value float64, usage string) *float64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Float64Var">func (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Init">func (f *FlagSet) Init(name string, errorHandling ErrorHandling)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Int">func (f *FlagSet) Int(name string, value int, usage string) *int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Int64">func (f *FlagSet) Int64(name string, value int64, usage string) *int64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Int64Var">func (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.IntVar">func (f *FlagSet) IntVar(p *int, name string, value int, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Lookup">func (f *FlagSet) Lookup(name string) *Flag</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.NArg">func (f *FlagSet) NArg() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.NFlag">func (f *FlagSet) NFlag() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Parse">func (f *FlagSet) Parse(arguments []string) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Parsed">func (f *FlagSet) Parsed() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.PrintDefaults">func (f *FlagSet) PrintDefaults()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Set">func (f *FlagSet) Set(name, value string) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.SetOutput">func (f *FlagSet) SetOutput(output io.Writer)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.String">func (f *FlagSet) String(name string, value string, usage string) *string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.StringVar">func (f *FlagSet) StringVar(p *string, name string, value string, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Uint">func (f *FlagSet) Uint(name string, value uint, usage string) *uint</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Uint64">func (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Uint64Var">func (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.UintVar">func (f *FlagSet) UintVar(p *uint, name string, value uint, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Var">func (f *FlagSet) Var(value Value, name string, usage string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.Visit">func (f *FlagSet) Visit(fn func(*Flag))</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FlagSet.VisitAll">func (f *FlagSet) VisitAll(fn func(*Flag))</a></dd>
				
			
				
				<dd><a href="#Value">type Value</a></dd>
				
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		
		<div id="pkg-examples">
			<h4>Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_">Package</a></dd>
			
			</dl>
		</div>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="/src/pkg/flag/flag.go">flag.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
		
			<h2 id="pkg-variables">Variables</h2>
			
				<pre>var <span id="ErrHelp">ErrHelp</span> = <a href="/pkg/errors/">errors</a>.<a href="/pkg/errors/#New">New</a>(&#34;flag: help requested&#34;)</pre>
				<p>
ErrHelp is the error returned if the flag -help is invoked but no such flag is defined.
</p>

			
				<pre>var <span id="Usage">Usage</span> = func() {
        <a href="/pkg/fmt/">fmt</a>.<a href="/pkg/fmt/#Fprintf">Fprintf</a>(<a href="/pkg/os/">os</a>.<a href="/pkg/os/#Stderr">Stderr</a>, &#34;Usage of %s:\n&#34;, <a href="/pkg/os/">os</a>.<a href="/pkg/os/#Args">Args</a>[0])
        <a href="#PrintDefaults">PrintDefaults</a>()
}</pre>
				<p>
Usage prints to standard error a usage message documenting all defined command-line flags.
The function is a variable that may be changed to point to a custom function.
</p>

			
		
		
			
			
			<h2 id="Arg">func <a href="/src/pkg/flag/flag.go?s=10735:10757#L391">Arg</a></h2>
			<pre>func Arg(i <a href="/pkg/builtin/#int">int</a>) <a href="/pkg/builtin/#string">string</a></pre>
			<p>
Arg returns the i&#39;th command-line argument.  Arg(0) is the first remaining argument
after flags have been processed.
</p>

			
		
			
			
			<h2 id="Args">func <a href="/src/pkg/flag/flag.go?s=11195:11215#L405">Args</a></h2>
			<pre>func Args() []<a href="/pkg/builtin/#string">string</a></pre>
			<p>
Args returns the non-flag command-line arguments.
</p>

			
		
			
			
			<h2 id="Bool">func <a href="/src/pkg/flag/flag.go?s=12303:12357#L429">Bool</a></h2>
			<pre>func Bool(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#bool">bool</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#bool">bool</a></pre>
			<p>
Bool defines a bool flag with specified name, default value, and usage string.
The return value is the address of a bool variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="BoolVar">func <a href="/src/pkg/flag/flag.go?s=11708:11768#L415">BoolVar</a></h2>
			<pre>func BoolVar(p *<a href="/pkg/builtin/#bool">bool</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#bool">bool</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
BoolVar defines a bool flag with specified name, default value, and usage string.
The argument p points to a bool variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="Duration">func <a href="/src/pkg/flag/flag.go?s=20841:20917#L611">Duration</a></h2>
			<pre>func Duration(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a></pre>
			<p>
Duration defines a time.Duration flag with specified name, default value, and usage string.
The return value is the address of a time.Duration variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="DurationVar">func <a href="/src/pkg/flag/flag.go?s=20141:20223#L597">DurationVar</a></h2>
			<pre>func DurationVar(p *<a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
DurationVar defines a time.Duration flag with specified name, default value, and usage string.
The argument p points to a time.Duration variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="Float64">func <a href="/src/pkg/flag/flag.go?s=19491:19554#L585">Float64</a></h2>
			<pre>func Float64(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#float64">float64</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#float64">float64</a></pre>
			<p>
Float64 defines a float64 flag with specified name, default value, and usage string.
The return value is the address of a float64 variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="Float64Var">func <a href="/src/pkg/flag/flag.go?s=18851:18920#L571">Float64Var</a></h2>
			<pre>func Float64Var(p *<a href="/pkg/builtin/#float64">float64</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#float64">float64</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
Float64Var defines a float64 flag with specified name, default value, and usage string.
The argument p points to a float64 variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="Int">func <a href="/src/pkg/flag/flag.go?s=13449:13500#L455">Int</a></h2>
			<pre>func Int(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int">int</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#int">int</a></pre>
			<p>
Int defines an int flag with specified name, default value, and usage string.
The return value is the address of an int variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="Int64">func <a href="/src/pkg/flag/flag.go?s=14641:14698#L481">Int64</a></h2>
			<pre>func Int64(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int64">int64</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#int64">int64</a></pre>
			<p>
Int64 defines an int64 flag with specified name, default value, and usage string.
The return value is the address of an int64 variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="Int64Var">func <a href="/src/pkg/flag/flag.go?s=14027:14090#L467">Int64Var</a></h2>
			<pre>func Int64Var(p *<a href="/pkg/builtin/#int64">int64</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int64">int64</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
Int64Var defines an int64 flag with specified name, default value, and usage string.
The argument p points to an int64 variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="IntVar">func <a href="/src/pkg/flag/flag.go?s=12865:12922#L441">IntVar</a></h2>
			<pre>func IntVar(p *<a href="/pkg/builtin/#int">int</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int">int</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
IntVar defines an int flag with specified name, default value, and usage string.
The argument p points to an int variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="NArg">func <a href="/src/pkg/flag/flag.go?s=10999:11014#L399">NArg</a></h2>
			<pre>func NArg() <a href="/pkg/builtin/#int">int</a></pre>
			<p>
NArg is the number of arguments remaining after flags have been processed.
</p>

			
		
			
			
			<h2 id="NFlag">func <a href="/src/pkg/flag/flag.go?s=10343:10359#L378">NFlag</a></h2>
			<pre>func NFlag() <a href="/pkg/builtin/#int">int</a></pre>
			<p>
NFlag returns the number of command-line flags that have been set.
</p>

			
		
			
			
			<h2 id="Parse">func <a href="/src/pkg/flag/flag.go?s=25664:25676#L773">Parse</a></h2>
			<pre>func Parse()</pre>
			<p>
Parse parses the command-line flags from os.Args[1:].  Must be called
after all flags are defined and before flags are accessed by the program.
</p>

			
		
			
			
			<h2 id="Parsed">func <a href="/src/pkg/flag/flag.go?s=25836:25854#L779">Parsed</a></h2>
			<pre>func Parsed() <a href="/pkg/builtin/#bool">bool</a></pre>
			<p>
Parsed returns true if the command-line flags have been parsed.
</p>

			
		
			
			
			<h2 id="PrintDefaults">func <a href="/src/pkg/flag/flag.go?s=9509:9529#L353">PrintDefaults</a></h2>
			<pre>func PrintDefaults()</pre>
			<p>
PrintDefaults prints to standard error the default values of all defined command-line flags.
</p>

			
		
			
			
			<h2 id="Set">func <a href="/src/pkg/flag/flag.go?s=8928:8962#L335">Set</a></h2>
			<pre>func Set(name, value <a href="/pkg/builtin/#string">string</a>) <a href="/pkg/builtin/#error">error</a></pre>
			<p>
Set sets the value of the named command-line flag.
</p>

			
		
			
			
			<h2 id="String">func <a href="/src/pkg/flag/flag.go?s=18245:18305#L559">String</a></h2>
			<pre>func String(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#string">string</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#string">string</a></pre>
			<p>
String defines a string flag with specified name, default value, and usage string.
The return value is the address of a string variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="StringVar">func <a href="/src/pkg/flag/flag.go?s=17620:17686#L545">StringVar</a></h2>
			<pre>func StringVar(p *<a href="/pkg/builtin/#string">string</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#string">string</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
StringVar defines a string flag with specified name, default value, and usage string.
The argument p points to a string variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="Uint">func <a href="/src/pkg/flag/flag.go?s=15811:15865#L507">Uint</a></h2>
			<pre>func Uint(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint">uint</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#uint">uint</a></pre>
			<p>
Uint defines a uint flag with specified name, default value, and usage string.
The return value is the address of a uint  variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="Uint64">func <a href="/src/pkg/flag/flag.go?s=17024:17084#L533">Uint64</a></h2>
			<pre>func Uint64(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint64">uint64</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#uint64">uint64</a></pre>
			<p>
Uint64 defines a uint64 flag with specified name, default value, and usage string.
The return value is the address of a uint64 variable that stores the value of the flag.
</p>

			
		
			
			
			<h2 id="Uint64Var">func <a href="/src/pkg/flag/flag.go?s=16399:16465#L519">Uint64Var</a></h2>
			<pre>func Uint64Var(p *<a href="/pkg/builtin/#uint64">uint64</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint64">uint64</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
Uint64Var defines a uint64 flag with specified name, default value, and usage string.
The argument p points to a uint64 variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="UintVar">func <a href="/src/pkg/flag/flag.go?s=15214:15274#L493">UintVar</a></h2>
			<pre>func UintVar(p *<a href="/pkg/builtin/#uint">uint</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint">uint</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
UintVar defines a uint flag with specified name, default value, and usage string.
The argument p points to a uint  variable in which to store the value of the flag.
</p>

			
		
			
			
			<h2 id="Var">func <a href="/src/pkg/flag/flag.go?s=22355:22403#L642">Var</a></h2>
			<pre>func Var(value <a href="#Value">Value</a>, name <a href="/pkg/builtin/#string">string</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
			<p>
Var defines a flag with the specified name and usage string. The type and
value of the flag are represented by the first argument, of type Value, which
typically holds a user-defined implementation of Value. For instance, the
caller could create a flag that turns a comma-separated string into a slice
of strings by giving the slice the methods of Value; in particular, Set would
decompose the comma-separated string into the slice.
</p>

			
		
			
			
			<h2 id="Visit">func <a href="/src/pkg/flag/flag.go?s=8150:8176#L302">Visit</a></h2>
			<pre>func Visit(fn func(*<a href="#Flag">Flag</a>))</pre>
			<p>
Visit visits the command-line flags in lexicographical order, calling fn
for each.  It visits only those flags that have been set.
</p>

			
		
			
			
			<h2 id="VisitAll">func <a href="/src/pkg/flag/flag.go?s=7726:7755#L288">VisitAll</a></h2>
			<pre>func VisitAll(fn func(*<a href="#Flag">Flag</a>))</pre>
			<p>
VisitAll visits the command-line flags in lexicographical order, calling
fn for each.  It visits all flags, even those not set.
</p>

			
		
		
			
			
			<h2 id="ErrorHandling">type <a href="/src/pkg/flag/flag.go?s=5803:5825#L216">ErrorHandling</a></h2>
			<pre>type ErrorHandling <a href="/pkg/builtin/#int">int</a></pre>
			<p>
ErrorHandling defines how to handle flag parsing errors.
</p>


			
				<pre>const (
        <span id="ContinueOnError">ContinueOnError</span> <a href="#ErrorHandling">ErrorHandling</a> = <a href="/pkg/builtin/#iota">iota</a>
        <span id="ExitOnError">ExitOnError</span>
        <span id="PanicOnError">PanicOnError</span>
)</pre>
				
			

			

			

			

			
		
			
			
			<h2 id="Flag">type <a href="/src/pkg/flag/flag.go?s=6530:6734#L242">Flag</a></h2>
			<pre>type Flag struct {
        Name     <a href="/pkg/builtin/#string">string</a> <span class="comment">// name as it appears on command line</span>
        Usage    <a href="/pkg/builtin/#string">string</a> <span class="comment">// help message</span>
        Value    <a href="#Value">Value</a>  <span class="comment">// value as set</span>
        DefValue <a href="/pkg/builtin/#string">string</a> <span class="comment">// default value (as text); for usage message</span>
}</pre>
			<p>
A Flag represents the state of a flag.
</p>


			

			

			

			
				
				<h3 id="Lookup">func <a href="/src/pkg/flag/flag.go?s=8465:8495#L313">Lookup</a></h3>
				<pre>func Lookup(name <a href="/pkg/builtin/#string">string</a>) *<a href="#Flag">Flag</a></pre>
				<p>
Lookup returns the Flag structure of the named command-line flag,
returning nil if none exists.
</p>

				
			

			
		
			
			
			<h2 id="FlagSet">type <a href="/src/pkg/flag/flag.go?s=5951:6486#L225">FlagSet</a></h2>
			<pre>type FlagSet struct {
        <span class="comment">// Usage is the function called when an error occurs while parsing flags.</span>
        <span class="comment">// The field is a function (not a method) that may be changed to point to</span>
        <span class="comment">// a custom error handler.</span>
        Usage func()
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A FlagSet represents a set of defined flags.
</p>


			

			

			

			
				
				<h3 id="NewFlagSet">func <a href="/src/pkg/flag/flag.go?s=26107:26173#L788">NewFlagSet</a></h3>
				<pre>func NewFlagSet(name <a href="/pkg/builtin/#string">string</a>, errorHandling <a href="#ErrorHandling">ErrorHandling</a>) *<a href="#FlagSet">FlagSet</a></pre>
				<p>
NewFlagSet returns a new, empty flag set with the specified name and
error handling property.
</p>

				
			

			
				
				<h3 id="FlagSet.Arg">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=10506:10541#L382">Arg</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Arg(i <a href="/pkg/builtin/#int">int</a>) <a href="/pkg/builtin/#string">string</a></pre>
				<p>
Arg returns the i&#39;th argument.  Arg(0) is the first remaining argument
after flags have been processed.
</p>

				
				
			
				
				<h3 id="FlagSet.Args">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=11089:11122#L402">Args</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Args() []<a href="/pkg/builtin/#string">string</a></pre>
				<p>
Args returns the non-flag arguments.
</p>

				
				
			
				
				<h3 id="FlagSet.Bool">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=11999:12066#L421">Bool</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Bool(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#bool">bool</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
Bool defines a bool flag with specified name, default value, and usage string.
The return value is the address of a bool variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.BoolVar">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=11415:11488#L409">BoolVar</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) BoolVar(p *<a href="/pkg/builtin/#bool">bool</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#bool">bool</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
BoolVar defines a bool flag with specified name, default value, and usage string.
The argument p points to a bool variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Duration">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=20480:20569#L603">Duration</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Duration(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a></pre>
				<p>
Duration defines a time.Duration flag with specified name, default value, and usage string.
The return value is the address of a time.Duration variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.DurationVar">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=19800:19895#L591">DurationVar</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) DurationVar(p *<a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/time/">time</a>.<a href="/pkg/time/#Duration">Duration</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
DurationVar defines a time.Duration flag with specified name, default value, and usage string.
The argument p points to a time.Duration variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Float64">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=19163:19239#L577">Float64</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Float64(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#float64">float64</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#float64">float64</a></pre>
				<p>
Float64 defines a float64 flag with specified name, default value, and usage string.
The return value is the address of a float64 variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Float64Var">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=18537:18619#L565">Float64Var</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Float64Var(p *<a href="/pkg/builtin/#float64">float64</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#float64">float64</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
Float64Var defines a float64 flag with specified name, default value, and usage string.
The argument p points to a float64 variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Init">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=26430:26494#L799">Init</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Init(name <a href="/pkg/builtin/#string">string</a>, errorHandling <a href="#ErrorHandling">ErrorHandling</a>)</pre>
				<p>
Init sets the name and error handling property for a flag set.
By default, the zero FlagSet uses an empty name and the
ContinueOnError error handling policy.
</p>

				
				
			
				
				<h3 id="FlagSet.Int">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=13151:13215#L447">Int</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Int(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int">int</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#int">int</a></pre>
				<p>
Int defines an int flag with specified name, default value, and usage string.
The return value is the address of an int variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Int64">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=14327:14397#L473">Int64</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Int64(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int64">int64</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#int64">int64</a></pre>
				<p>
Int64 defines an int64 flag with specified name, default value, and usage string.
The return value is the address of an int64 variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Int64Var">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=13725:13801#L461">Int64Var</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Int64Var(p *<a href="/pkg/builtin/#int64">int64</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int64">int64</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
Int64Var defines an int64 flag with specified name, default value, and usage string.
The argument p points to an int64 variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.IntVar">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=12577:12647#L435">IntVar</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) IntVar(p *<a href="/pkg/builtin/#int">int</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#int">int</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
IntVar defines an int flag with specified name, default value, and usage string.
The argument p points to an int variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Lookup">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=8291:8334#L307">Lookup</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Lookup(name <a href="/pkg/builtin/#string">string</a>) *<a href="#Flag">Flag</a></pre>
				<p>
Lookup returns the Flag structure of the named flag, returning nil if none exists.
</p>

				
				
			
				
				<h3 id="FlagSet.NArg">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=10868:10896#L396">NArg</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) NArg() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
NArg is the number of arguments remaining after flags have been processed.
</p>

				
				
			
				
				<h3 id="FlagSet.NFlag">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=10217:10246#L375">NFlag</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) NFlag() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
NFlag returns the number of flags that have been set.
</p>

				
				
			
				
				<h3 id="FlagSet.Parse">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=25070:25119#L743">Parse</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Parse(arguments []<a href="/pkg/builtin/#string">string</a>) <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Parse parses flag definitions from the argument list, which should not
include the command name.  Must be called after all flags in the FlagSet
are defined and before flags are accessed by the program.
The return value will be ErrHelp if -help was set but not defined.
</p>

				
				
			
				
				<h3 id="FlagSet.Parsed">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=25460:25491#L767">Parsed</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Parsed() <a href="/pkg/builtin/#bool">bool</a></pre>
				<p>
Parsed reports whether f.Parse has been called.
</p>

				
				
			
				
				<h3 id="FlagSet.PrintDefaults">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=9132:9165#L341">PrintDefaults</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) PrintDefaults()</pre>
				<p>
PrintDefaults prints, to standard error unless configured
otherwise, the default values of all defined flags in the set.
</p>

				
				
			
				
				<h3 id="FlagSet.Set">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=8575:8622#L318">Set</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Set(name, value <a href="/pkg/builtin/#string">string</a>) <a href="/pkg/builtin/#error">error</a></pre>
				<p>
Set sets the value of the named flag.
</p>

				
				
			
				
				<h3 id="FlagSet.SetOutput">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=7296:7341#L274">SetOutput</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) SetOutput(output <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Writer">Writer</a>)</pre>
				<p>
SetOutput sets the destination for usage and error messages.
If output is nil, os.Stderr is used.
</p>

				
				
			
				
				<h3 id="FlagSet.String">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=17925:17998#L551">String</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) String(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#string">string</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#string">string</a></pre>
				<p>
String defines a string flag with specified name, default value, and usage string.
The return value is the address of a string variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.StringVar">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=17313:17392#L539">StringVar</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) StringVar(p *<a href="/pkg/builtin/#string">string</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#string">string</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
StringVar defines a string flag with specified name, default value, and usage string.
The argument p points to a string variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Uint">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=15506:15573#L499">Uint</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Uint(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint">uint</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#uint">uint</a></pre>
				<p>
Uint defines a uint flag with specified name, default value, and usage string.
The return value is the address of a uint  variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Uint64">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=16704:16777#L525">Uint64</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Uint64(name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint64">uint64</a>, usage <a href="/pkg/builtin/#string">string</a>) *<a href="/pkg/builtin/#uint64">uint64</a></pre>
				<p>
Uint64 defines a uint64 flag with specified name, default value, and usage string.
The return value is the address of a uint64 variable that stores the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Uint64Var">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=16092:16171#L513">Uint64Var</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Uint64Var(p *<a href="/pkg/builtin/#uint64">uint64</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint64">uint64</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
Uint64Var defines a uint64 flag with specified name, default value, and usage string.
The argument p points to a uint64 variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.UintVar">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=14920:14993#L487">UintVar</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) UintVar(p *<a href="/pkg/builtin/#uint">uint</a>, name <a href="/pkg/builtin/#string">string</a>, value <a href="/pkg/builtin/#uint">uint</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
UintVar defines a uint flag with specified name, default value, and usage string.
The argument p points to a uint variable in which to store the value of the flag.
</p>

				
				
			
				
				<h3 id="FlagSet.Var">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=21423:21484#L621">Var</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Var(value <a href="#Value">Value</a>, name <a href="/pkg/builtin/#string">string</a>, usage <a href="/pkg/builtin/#string">string</a>)</pre>
				<p>
Var defines a flag with the specified name and usage string. The type and
value of the flag are represented by the first argument, of type Value, which
typically holds a user-defined implementation of Value. For instance, the
caller could create a flag that turns a comma-separated string into a slice
of strings by giving the slice the methods of Value; in particular, Set would
decompose the comma-separated string into the slice.
</p>

				
				
			
				
				<h3 id="FlagSet.Visit">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=7910:7949#L294">Visit</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) Visit(fn func(*<a href="#Flag">Flag</a>))</pre>
				<p>
Visit visits the flags in lexicographical order, calling fn for each.
It visits only those flags that have been set.
</p>

				
				
			
				
				<h3 id="FlagSet.VisitAll">func (*FlagSet) <a href="/src/pkg/flag/flag.go?s=7486:7528#L280">VisitAll</a></h3>
				<pre>func (f *<a href="#FlagSet">FlagSet</a>) VisitAll(fn func(*<a href="#Flag">Flag</a>))</pre>
				<p>
VisitAll visits the flags in lexicographical order, calling fn for each.
It visits all flags, even those not set.
</p>

				
				
			
		
			
			
			<h2 id="Value">type <a href="/src/pkg/flag/flag.go?s=5681:5741#L210">Value</a></h2>
			<pre>type Value interface {
        String() <a href="/pkg/builtin/#string">string</a>
        Set(<a href="/pkg/builtin/#string">string</a>) <a href="/pkg/builtin/#error">error</a>
}</pre>
			<p>
Value is the interface to the dynamic value stored in a flag.
(The default value is represented as a string.)
</p>
<p>
If a Value has an IsBoolFlag() bool method returning true,
the command-line parser makes -name equivalent to -name=true
rather than using the next command-line argument.
</p>


			

			

			

			

			
		
	

	







<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/playground.js.pagespeed.jm.Up9d4M3oKE.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
<script type="text/javascript">$(function(){if(!$('#topbar').is('.wide'))return;$('<a href="#feedback" id="feedback">Send Feedback</a>').insertAfter('#topbar');$('#feedback').click(function(){userfeedback.api.startFeedback({'productId':'92634','bucket':'godoc'});return false;});});</script>
<style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style>


<script type="text/javascript">(function(){var ga=document.createElement("script");ga.type="text/javascript";ga.async=true;ga.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga,s);})();</script>
<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vo', 'load', '&ft=74&s_ttfb=90&id=1376729125052342', 'http://golang.org/pkg/flag/');</script></body>
</html>

<noscript class="psa_add_styles"><link type="text/css" rel="stylesheet" href="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/A.style.css.pagespeed.cf.NnmSRHJsAc.css"><style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style></noscript><script pagespeed_no_defer="">var stylesAdded=false;var addAllStyles=function(){if(stylesAdded)return;stylesAdded=true;var div=document.createElement("div");var styleText="";var styleElements=document.getElementsByClassName("psa_add_styles");for(var i=0;i<styleElements.length;++i){styleText+=styleElements[i].textContent||styleElements[i].innerHTML||styleElements[i].data||"";}div.innerHTML=styleText;document.body.appendChild(div);};if(window.addEventListener){document.addEventListener("DOMContentLoaded",addAllStyles,false);window.addEventListener("load",addAllStyles,false);}else if(window.attachEvent){window.attachEvent("onload",addAllStyles);}else{window.onload=addAllStyles;}window['pagespeed']=window['pagespeed']||{};window['pagespeed']['criticalCss']={'total_critical_inlined_size':5091,'total_original_external_size':6889,'total_overhead_size':5467,'num_replaced_links':1,'num_unreplaced_links':0};</script>