<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>list - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link type="text/css" rel="stylesheet" href="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/A.style.css.pagespeed.cf.NnmSRHJsAc.css">

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

<script type="text/javascript">window.initFuncs=[];</script>
<script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-11222381-2"]);_gaq.push(["_trackPageview"]);</script>
<style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style><link rel="dns-prefetch" href="//ajax.googleapis.com"><link rel="dns-prefetch" href="//www.gstatic.com"><link rel="canonical" href="http://golang.org/pkg/container/list/"/></head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package list</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "container/list"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
				<dd><a href="#pkg-examples" class="examplesLink">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				<p>
Package list implements a doubly linked list.
</p>
<p>
To iterate over a list (where l is a *List):
</p>
<pre>for e := l.Front(); e != nil; e = e.Next() {
	// do something with e.Value
}
</pre>

			</div>
		</div>
		<div id="example_" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	&#34;container/list&#34;
	&#34;fmt&#34;
)

func main() {
	// Create a new list and put some numbers in it.
	l := list.New()
	e4 := l.PushBack(4)
	e1 := l.PushFront(1)
	l.InsertBefore(3, e4)
	l.InsertAfter(2, e1)

	// Iterate through list and and print its contents.
	for e := l.Front(); e != nil; e = e.Next() {
		fmt.Println(e.Value)
	}

}
</textarea></div>
				<div class="output"><pre>1
2
3
4
</pre></div>
				<div class="buttons">
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
				</div>
			</div>
		
	</div>
</div>


		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#Element">type Element</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Element.Next">func (e *Element) Next() *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Element.Prev">func (e *Element) Prev() *Element</a></dd>
				
			
				
				<dd><a href="#List">type List</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New() *List</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Back">func (l *List) Back() *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Front">func (l *List) Front() *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Init">func (l *List) Init() *List</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.InsertAfter">func (l *List) InsertAfter(v interface{}, mark *Element) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.InsertBefore">func (l *List) InsertBefore(v interface{}, mark *Element) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Len">func (l *List) Len() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.MoveToBack">func (l *List) MoveToBack(e *Element)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.MoveToFront">func (l *List) MoveToFront(e *Element)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushBack">func (l *List) PushBack(v interface{}) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushBackList">func (l *List) PushBackList(other *List)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushFront">func (l *List) PushFront(v interface{}) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushFrontList">func (l *List) PushFrontList(other *List)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Remove">func (l *List) Remove(e *Element) interface{}</a></dd>
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		
		<div id="pkg-examples">
			<h4>Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_">Package</a></dd>
			
			</dl>
		</div>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="/src/pkg/container/list/list.go">list.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
		
		
		
			
			
			<h2 id="Element">type <a href="/src/pkg/container/list/list.go?s=406:874#L5">Element</a></h2>
			<pre>type Element struct {

        <span class="comment">// The value stored with this element.</span>
        Value interface{}
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Element is an element of a linked list.
</p>


			

			

			

			

			
				
				<h3 id="Element.Next">func (*Element) <a href="/src/pkg/container/list/list.go?s=922:955#L21">Next</a></h3>
				<pre>func (e *<a href="#Element">Element</a>) Next() *<a href="#Element">Element</a></pre>
				<p>
Next returns the next list element or nil.
</p>

				
				
			
				
				<h3 id="Element.Prev">func (*Element) <a href="/src/pkg/container/list/list.go?s=1074:1107#L29">Prev</a></h3>
				<pre>func (e *<a href="#Element">Element</a>) Prev() *<a href="#Element">Element</a></pre>
				<p>
Prev returns the previous list element or nil.
</p>

				
				
			
		
			
			
			<h2 id="List">type <a href="/src/pkg/container/list/list.go?s=1275:1452#L38">List</a></h2>
			<pre>type List struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
List represents a doubly linked list.
The zero value for List is an empty list ready to use.
</p>


			

			

			

			
				
				<h3 id="New">func <a href="/src/pkg/container/list/list.go?s=1628:1644#L52">New</a></h3>
				<pre>func New() *<a href="#List">List</a></pre>
				<p>
New returns an initialized list.
</p>

				
			

			
				
				<h3 id="List.Back">func (*List) <a href="/src/pkg/container/list/list.go?s=1959:1989#L66">Back</a></h3>
				<pre>func (l *<a href="#List">List</a>) Back() *<a href="#Element">Element</a></pre>
				<p>
Back returns the last element of list l or nil.
</p>

				
				
			
				
				<h3 id="List.Front">func (*List) <a href="/src/pkg/container/list/list.go?s=1818:1849#L58">Front</a></h3>
				<pre>func (l *<a href="#List">List</a>) Front() *<a href="#Element">Element</a></pre>
				<p>
Front returns the first element of list l or nil
</p>

				
				
			
				
				<h3 id="List.Init">func (*List) <a href="/src/pkg/container/list/list.go?s=1492:1519#L44">Init</a></h3>
				<pre>func (l *<a href="#List">List</a>) Init() *<a href="#List">List</a></pre>
				<p>
Init initializes or clears list l.
</p>

				
				
			
				
				<h3 id="List.InsertAfter">func (*List) <a href="/src/pkg/container/list/list.go?s=4054:4119#L143">InsertAfter</a></h3>
				<pre>func (l *<a href="#List">List</a>) InsertAfter(v interface{}, mark *<a href="#Element">Element</a>) *<a href="#Element">Element</a></pre>
				<p>
InsertAfter inserts a new element e with value v immediately after mark and returns e.
If mark is not an element of l, the list is not modified.
</p>

				
				
			
				
				<h3 id="List.InsertBefore">func (*List) <a href="/src/pkg/container/list/list.go?s=3701:3767#L133">InsertBefore</a></h3>
				<pre>func (l *<a href="#List">List</a>) InsertBefore(v interface{}, mark *<a href="#Element">Element</a>) *<a href="#Element">Element</a></pre>
				<p>
InsertBefore inserts a new element e with value v immediately before mark and returns e.
If mark is not an element of l, the list is not modified.
</p>

				
				
			
				
				<h3 id="List.Len">func (*List) <a href="/src/pkg/container/list/list.go?s=1723:1747#L55">Len</a></h3>
				<pre>func (l *<a href="#List">List</a>) Len() <a href="/pkg/builtin/#int">int</a></pre>
				<p>
Len returns the number of elements of list l.
</p>

				
				
			
				
				<h3 id="List.MoveToBack">func (*List) <a href="/src/pkg/container/list/list.go?s=4657:4694#L163">MoveToBack</a></h3>
				<pre>func (l *<a href="#List">List</a>) MoveToBack(e *<a href="#Element">Element</a>)</pre>
				<p>
MoveToBack moves element e to the back of list l.
If e is not an element of l, the list is not modified.
</p>

				
				
			
				
				<h3 id="List.MoveToFront">func (*List) <a href="/src/pkg/container/list/list.go?s=4363:4401#L153">MoveToFront</a></h3>
				<pre>func (l *<a href="#List">List</a>) MoveToFront(e *<a href="#Element">Element</a>)</pre>
				<p>
MoveToFront moves element e to the front of list l.
If e is not an element of l, the list is not modified.
</p>

				
				
			
				
				<h3 id="List.PushBack">func (*List) <a href="/src/pkg/container/list/list.go?s=3443:3490#L126">PushBack</a></h3>
				<pre>func (l *<a href="#List">List</a>) PushBack(v interface{}) *<a href="#Element">Element</a></pre>
				<p>
PushBack inserts a new element e with value v at the back of list l and returns e.
</p>

				
				
			
				
				<h3 id="List.PushBackList">func (*List) <a href="/src/pkg/container/list/list.go?s=4956:4996#L173">PushBackList</a></h3>
				<pre>func (l *<a href="#List">List</a>) PushBackList(other *<a href="#List">List</a>)</pre>
				<p>
PushBackList inserts a copy of an other list at the back of list l.
The lists l and other may be the same.
</p>

				
				
			
				
				<h3 id="List.PushFront">func (*List) <a href="/src/pkg/container/list/list.go?s=3255:3303#L120">PushFront</a></h3>
				<pre>func (l *<a href="#List">List</a>) PushFront(v interface{}) *<a href="#Element">Element</a></pre>
				<p>
Pushfront inserts a new element e with value v at the front of list l and returns e.
</p>

				
				
			
				
				<h3 id="List.PushFrontList">func (*List) <a href="/src/pkg/container/list/list.go?s=5243:5284#L182">PushFrontList</a></h3>
				<pre>func (l *<a href="#List">List</a>) PushFrontList(other *<a href="#List">List</a>)</pre>
				<p>
PushFrontList inserts a copy of an other list at the front of list l.
The lists l and other may be the same.
</p>

				
				
			
				
				<h3 id="List.Remove">func (*List) <a href="/src/pkg/container/list/list.go?s=2927:2972#L110">Remove</a></h3>
				<pre>func (l *<a href="#List">List</a>) Remove(e *<a href="#Element">Element</a>) interface{}</pre>
				<p>
Remove removes e from l if e is an element of list l.
It returns the element value e.Value.
</p>

				
				
			
		
	

	







<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/playground.js.pagespeed.jm.Up9d4M3oKE.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
<script type="text/javascript">$(function(){if(!$('#topbar').is('.wide'))return;$('<a href="#feedback" id="feedback">Send Feedback</a>').insertAfter('#topbar');$('#feedback').click(function(){userfeedback.api.startFeedback({'productId':'92634','bucket':'godoc'});return false;});});</script>



<script type="text/javascript">(function(){var ga=document.createElement("script");ga.type="text/javascript";ga.async=true;ga.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga,s);})();</script>
<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vo', 'load', '&ft=39&id=1376728684582095', 'http://golang.org/pkg/container/list/');</script></body>
</html>

