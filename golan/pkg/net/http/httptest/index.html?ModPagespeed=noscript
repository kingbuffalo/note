<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>httptest - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><style>body{margin:0px;font-family:Helvetica,Arial,sans-serif;font-size:16px}pre,code{font-family:Menlo,monospace;font-size:14px}pre{line-height:18px}pre .comment{color:#060}body{color:#222}a,.exampleHeading .text{color:#375eab;text-decoration:none}a:hover,.exampleHeading .text:hover{text-decoration:underline}p,pre,ul,ol{margin:20px}pre{background-color:#e9e9e9;padding:10px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px;background-position:initial initial;background-repeat:initial initial}h1,h2,h3,h4,.rootHeading{margin:20px 0px;padding:0px;color:#375eab;font-weight:bold}h1{font-size:24px}h2{font-size:20px;background-color:#e0ebf5;padding:2px 5px;background-position:initial initial;background-repeat:initial initial}h3{font-size:20px}h3,h4{margin:20px 5px}h4{font-size:16px}dl{margin:20px}dd{margin:2px 20px}dl,dd{font-size:14px}div#heading{float:left;margin:0px 0px 10px;padding:21px 0px;font-size:20px;font-weight:normal}div#heading a{color:#222;text-decoration:none}div#topbar{background-color:#e0ebf5;height:64px;overflow:hidden;background-position:initial initial;background-repeat:initial initial}body{text-align:center}div#page{width:100%}div#page>.container,div#topbar>.container{text-align:left;margin-left:auto;margin-right:auto;padding:0px 20px;width:900px}div#page.wide>.container,div#topbar.wide>.container{width:auto}div#plusone{float:right;clear:right;margin-top:5px}div#footer{text-align:center;color:#666;font-size:14px;margin:40px 0px}div#menu>a,div#menu>input,div#learn .buttons a,div.play .buttons a,div#blog .read a{padding:10px;text-decoration:none;font-size:16px;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px;border-bottom-left-radius:5px}div#playground .buttons a,div#menu>a,div#menu>input{border:1px solid #375eab}div#playground .buttons a,div#menu>a{color:#fff;background-color:#375eab;background-position:initial initial;background-repeat:initial initial}a#start,div#learn .buttons a,div.play .buttons a,div#blog .read a{color:#222;border:1px solid #375eab;background-color:#e0ebf5;background-position:initial initial;background-repeat:initial initial}div#menu{float:right;min-width:590px;padding:10px 0px;text-align:right}div#menu>a{margin-right:5px;margin-bottom:10px;padding:10px}div#menu>input{position:relative;top:1px;width:60px;background-color:#fff;color:#222;background-position:initial initial;background-repeat:initial initial}div#menu>input.inactive{color:#999}.toggleButton{cursor:pointer}.toggleVisible .collapsed{display:none}.toggleVisible .expanded{display:block}h2{clear:right}div.play{padding:0px 20px 40px}div.play pre,div.play textarea,div.play .lines{padding:0px;margin:0px;font-family:Menlo,monospace;font-size:14px}div.play .input{padding:10px;margin-top:10px;border-top-left-radius:5px;border-top-right-radius:5px;overflow:hidden}div.play .input textarea{width:100%;height:100%;border:none;outline:none;resize:none;overflow:hidden}div#playground .input textarea{overflow:auto;resize:auto}div.play .output{padding:10px;max-height:200px;overflow:auto;border-bottom-right-radius:5px;border-bottom-left-radius:5px;border-top-style:none!important}div.play .input,div.play .input textarea,div.play .output,div.play .output pre{background-color:#ffffd8;background-position:initial initial;background-repeat:initial initial}div.play .input,div.play .output{border:1px solid #375eab}div.play .buttons{float:right;padding:20px 0px 10px;text-align:right}div.play .buttons a{height:16px;margin-left:5px;padding:10px;cursor:pointer}#playgroundButton,div#playground{display:none}div#playground{position:absolute;top:63px;right:20px;padding:0px 10px 10px;z-index:1;text-align:left;background-color:#e0ebf5;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-style:none solid solid;border-right-color:#b0bbc5;border-bottom-color:#b0bbc5;border-left-color:#b0bbc5;border-bottom-left-radius:5px;border-bottom-right-radius:5px;background-position:initial initial;background-repeat:initial initial}div#playground .code{width:520px;height:200px}div#playground .output{height:100px}</style>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

<script type="text/javascript">window.initFuncs=[];</script>
<script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-11222381-2"]);_gaq.push(["_trackPageview"]);</script>
<style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style><link rel="dns-prefetch" href="//ajax.googleapis.com"><link rel="dns-prefetch" href="//1-ps.googleusercontent.com"><link rel="dns-prefetch" href="//www.gstatic.com"><link rel="canonical" href="http://golang.org/pkg/net/http/httptest/"/></head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package httptest</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "net/http/httptest"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
				<dd><a href="#pkg-examples" class="examplesLink">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				<p>
Package httptest provides utilities for HTTP testing.
</p>

			</div>
		</div>
		

		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
				<dd><a href="#pkg-constants">Constants</a></dd>
			
			
			
			
				
				<dd><a href="#ResponseRecorder">type ResponseRecorder</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewRecorder">func NewRecorder() *ResponseRecorder</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.Flush">func (rw *ResponseRecorder) Flush()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.Header">func (rw *ResponseRecorder) Header() http.Header</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.Write">func (rw *ResponseRecorder) Write(buf []byte) (int, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.WriteHeader">func (rw *ResponseRecorder) WriteHeader(code int)</a></dd>
				
			
				
				<dd><a href="#Server">type Server</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewServer">func NewServer(handler http.Handler) *Server</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewTLSServer">func NewTLSServer(handler http.Handler) *Server</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewUnstartedServer">func NewUnstartedServer(handler http.Handler) *Server</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.Close">func (s *Server) Close()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.CloseClientConnections">func (s *Server) CloseClientConnections()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.Start">func (s *Server) Start()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.StartTLS">func (s *Server) StartTLS()</a></dd>
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		
		<div id="pkg-examples">
			<h4>Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_ResponseRecorder">ResponseRecorder</a></dd>
			
			<dd><a class="exampleLink" href="#example_Server">Server</a></dd>
			
			</dl>
		</div>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="/src/pkg/net/http/httptest/recorder.go">recorder.go</a>
			
				<a href="/src/pkg/net/http/httptest/server.go">server.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
			<h2 id="pkg-constants">Constants</h2>
			
				<pre>const <span id="DefaultRemoteAddr">DefaultRemoteAddr</span> = &#34;1.2.3.4&#34;</pre>
				<p>
DefaultRemoteAddr is the default remote address to return in RemoteAddr if
an explicit DefaultRemoteAddr isn&#39;t set on ResponseRecorder.
</p>

			
		
		
		
		
			
			
			<h2 id="ResponseRecorder">type <a href="/src/pkg/net/http/httptest/recorder.go?s=393:665#L5">ResponseRecorder</a></h2>
			<pre>type ResponseRecorder struct {
        Code      <a href="/pkg/builtin/#int">int</a>           <span class="comment">// the HTTP response code from WriteHeader</span>
        HeaderMap <a href="/pkg/net/http/">http</a>.<a href="/pkg/net/http/#Header">Header</a>   <span class="comment">// the HTTP response headers</span>
        Body      *<a href="/pkg/bytes/">bytes</a>.<a href="/pkg/bytes/#Buffer">Buffer</a> <span class="comment">// if non-nil, the bytes.Buffer to append written data to</span>
        Flushed   <a href="/pkg/builtin/#bool">bool</a>
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
ResponseRecorder is an implementation of http.ResponseWriter that
records its mutations for later inspection in tests.
</p>


			

			

			<div id="example_ResponseRecorder" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	&#34;fmt&#34;
	&#34;log&#34;
	&#34;net/http&#34;
	&#34;net/http/httptest&#34;
)

func main() {
	handler := func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, &#34;something failed&#34;, http.StatusInternalServerError)
	}

	req, err := http.NewRequest(&#34;GET&#34;, &#34;http://example.com/foo&#34;, nil)
	if err != nil {
		log.Fatal(err)
	}

	w := httptest.NewRecorder()
	handler(w, req)

	fmt.Printf(&#34;%d - %s&#34;, w.Code, w.Body.String())
}
</textarea></div>
				<div class="output"><pre>500 - something failed
</pre></div>
				<div class="buttons">
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
				</div>
			</div>
		
	</div>
</div>


			
				
				<h3 id="NewRecorder">func <a href="/src/pkg/net/http/httptest/recorder.go?s=723:759#L15">NewRecorder</a></h3>
				<pre>func NewRecorder() *<a href="#ResponseRecorder">ResponseRecorder</a></pre>
				<p>
NewRecorder returns an initialized ResponseRecorder.
</p>

				
			

			
				
				<h3 id="ResponseRecorder.Flush">func (*ResponseRecorder) <a href="/src/pkg/net/http/httptest/recorder.go?s=1661:1696#L57">Flush</a></h3>
				<pre>func (rw *<a href="#ResponseRecorder">ResponseRecorder</a>) Flush()</pre>
				<p>
Flush sets rw.Flushed to true.
</p>

				
				
			
				
				<h3 id="ResponseRecorder.Header">func (*ResponseRecorder) <a href="/src/pkg/net/http/httptest/recorder.go?s=1096:1144#L28">Header</a></h3>
				<pre>func (rw *<a href="#ResponseRecorder">ResponseRecorder</a>) Header() <a href="/pkg/net/http/">http</a>.<a href="/pkg/net/http/#Header">Header</a></pre>
				<p>
Header returns the response headers.
</p>

				
				
			
				
				<h3 id="ResponseRecorder.Write">func (*ResponseRecorder) <a href="/src/pkg/net/http/httptest/recorder.go?s=1300:1358#L38">Write</a></h3>
				<pre>func (rw *<a href="#ResponseRecorder">ResponseRecorder</a>) Write(buf []<a href="/pkg/builtin/#byte">byte</a>) (<a href="/pkg/builtin/#int">int</a>, <a href="/pkg/builtin/#error">error</a>)</pre>
				<p>
Write always succeeds and writes to rw.Body, if not nil.
</p>

				
				
			
				
				<h3 id="ResponseRecorder.WriteHeader">func (*ResponseRecorder) <a href="/src/pkg/net/http/httptest/recorder.go?s=1507:1556#L49">WriteHeader</a></h3>
				<pre>func (rw *<a href="#ResponseRecorder">ResponseRecorder</a>) WriteHeader(code <a href="/pkg/builtin/#int">int</a>)</pre>
				<p>
WriteHeader sets rw.Code.
</p>

				
				
			
		
			
			
			<h2 id="Server">type <a href="/src/pkg/net/http/httptest/server.go?s=415:1018#L11">Server</a></h2>
			<pre>type Server struct {
        URL      <a href="/pkg/builtin/#string">string</a> <span class="comment">// base URL of form http://ipaddr:port with no trailing slash</span>
        Listener <a href="/pkg/net/">net</a>.<a href="/pkg/net/#Listener">Listener</a>

        <span class="comment">// TLS is the optional TLS configuration, populated with a new config</span>
        <span class="comment">// after TLS is started. If set on an unstarted server before StartTLS</span>
        <span class="comment">// is called, existing fields are copied into the new config.</span>
        TLS *<a href="/pkg/crypto/tls/">tls</a>.<a href="/pkg/crypto/tls/#Config">Config</a>

        <span class="comment">// Config may be changed after calling NewUnstartedServer and</span>
        <span class="comment">// before Start or StartTLS.</span>
        Config *<a href="/pkg/net/http/">http</a>.<a href="/pkg/net/http/#Server">Server</a>
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Server is an HTTP server listening on a system-chosen port on the
local loopback interface, for use in end-to-end HTTP tests.
</p>


			

			

			<div id="example_Server" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	&#34;fmt&#34;
	&#34;io/ioutil&#34;
	&#34;log&#34;
	&#34;net/http&#34;
	&#34;net/http/httptest&#34;
)

func main() {
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, &#34;Hello, client&#34;)
	}))
	defer ts.Close()

	res, err := http.Get(ts.URL)
	if err != nil {
		log.Fatal(err)
	}
	greeting, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf(&#34;%s&#34;, greeting)
}
</textarea></div>
				<div class="output"><pre>Hello, client
</pre></div>
				<div class="buttons">
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
				</div>
			</div>
		
	</div>
</div>


			
				
				<h3 id="NewServer">func <a href="/src/pkg/net/http/httptest/server.go?s=2238:2282#L72">NewServer</a></h3>
				<pre>func NewServer(handler <a href="/pkg/net/http/">http</a>.<a href="/pkg/net/http/#Handler">Handler</a>) *<a href="#Server">Server</a></pre>
				<p>
NewServer starts and returns a new Server.
The caller should call Close when finished, to shut it down.
</p>

				
			
				
				<h3 id="NewTLSServer">func <a href="/src/pkg/net/http/httptest/server.go?s=4133:4180#L148">NewTLSServer</a></h3>
				<pre>func NewTLSServer(handler <a href="/pkg/net/http/">http</a>.<a href="/pkg/net/http/#Handler">Handler</a>) *<a href="#Server">Server</a></pre>
				<p>
NewTLSServer starts and returns a new Server using TLS.
The caller should call Close when finished, to shut it down.
</p>

				
			
				
				<h3 id="NewUnstartedServer">func <a href="/src/pkg/net/http/httptest/server.go?s=2563:2616#L84">NewUnstartedServer</a></h3>
				<pre>func NewUnstartedServer(handler <a href="/pkg/net/http/">http</a>.<a href="/pkg/net/http/#Handler">Handler</a>) *<a href="#Server">Server</a></pre>
				<p>
NewUnstartedServer returns a new Server but doesn&#39;t start it.
</p>
<p>
After changing its configuration, the caller should call Start or
StartTLS.
</p>
<p>
The caller should call Close when finished, to shut it down.
</p>

				
			

			
				
				<h3 id="Server.Close">func (*Server) <a href="/src/pkg/net/http/httptest/server.go?s=4354:4378#L156">Close</a></h3>
				<pre>func (s *<a href="#Server">Server</a>) Close()</pre>
				<p>
Close shuts down the server and blocks until all outstanding
requests on this server have completed.
</p>

				
				
			
				
				<h3 id="Server.CloseClientConnections">func (*Server) <a href="/src/pkg/net/http/httptest/server.go?s=4626:4667#L167">CloseClientConnections</a></h3>
				<pre>func (s *<a href="#Server">Server</a>) CloseClientConnections()</pre>
				<p>
CloseClientConnections closes any currently open HTTP connections
to the test Server.
</p>

				
				
			
				
				<h3 id="Server.Start">func (*Server) <a href="/src/pkg/net/http/httptest/server.go?s=2768:2792#L92">Start</a></h3>
				<pre>func (s *<a href="#Server">Server</a>) Start()</pre>
				<p>
Start starts a server from NewUnstartedServer.
</p>

				
				
			
				
				<h3 id="Server.StartTLS">func (*Server) <a href="/src/pkg/net/http/httptest/server.go?s=3153:3180#L107">StartTLS</a></h3>
				<pre>func (s *<a href="#Server">Server</a>) StartTLS()</pre>
				<p>
StartTLS starts TLS on a server from NewUnstartedServer.
</p>

				
				
			
		
	

	







<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/playground.js.pagespeed.jm.Up9d4M3oKE.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
<script type="text/javascript">$(function(){if(!$('#topbar').is('.wide'))return;$('<a href="#feedback" id="feedback">Send Feedback</a>').insertAfter('#topbar');$('#feedback').click(function(){userfeedback.api.startFeedback({'productId':'92634','bucket':'godoc'});return false;});});</script>



<script type="text/javascript">(function(){var ga=document.createElement("script");ga.type="text/javascript";ga.async=true;ga.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga,s);})();</script>
<noscript class="psa_add_styles"><link type="text/css" rel="stylesheet" href="http://1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/lib/godoc/A.style.css.pagespeed.cf.NnmSRHJsAc.css"><style>#feedback{display:block;float:right;margin-right:20px;padding:5px;font-size:14px;background:#e0ebf5;border:1px solid #e0ebf5;-webkit-border-bottom-left-radius:5px;-webkit-border-bottom-right-radius:5px;-moz-border-radius-bottomleft:5px;-moz-border-radius-bottomright:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style></noscript><script pagespeed_no_defer="">var stylesAdded=false;var addAllStyles=function(){if(stylesAdded)return;stylesAdded=true;var div=document.createElement("div");var styleText="";var styleElements=document.getElementsByClassName("psa_add_styles");for(var i=0;i<styleElements.length;++i){styleText+=styleElements[i].textContent||styleElements[i].innerHTML||styleElements[i].data||"";}div.innerHTML=styleText;document.body.appendChild(div);};if(window.addEventListener){document.addEventListener("DOMContentLoaded",addAllStyles,false);window.addEventListener("load",addAllStyles,false);}else if(window.attachEvent){window.attachEvent("onload",addAllStyles);}else{window.onload=addAllStyles;}window['pagespeed']=window['pagespeed']||{};window['pagespeed']['criticalCss']={'total_critical_inlined_size':4941,'total_original_external_size':6889,'total_overhead_size':5317,'num_replaced_links':1,'num_unreplaced_links':0};</script><script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vo', 'load', '&ft=39&id=1376730231495510', 'http://golang.org/pkg/net/http/httptest/');</script></body>
</html>

