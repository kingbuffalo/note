如何解析c程序 （一个分为9章的教程)
预览
从 clang的官方网站上说：
clang 是一个 c,c++ obj-c 语言的llvm编译器的前端。
这意味着什么呢，clang 是一个将字符串的源代码转换成一个相同功能（源代码程序功能）树结构的代码：抽象语法树。
在没有语法树的时候，你要xxoo的时候比较困难。例如，重命一个变量名是非常困难的：因为你不能通过简单的寻找旧的名字然后再将其replace成一个新名字。如果你那样做的话，会改变太多了。（例如：在不同的命名空间上有相同的名字，==）。但如果你有语法树，世界是多么地美妙：理论上你只要改变声明变量那个节点（在语法树上的结点）上，然后再将语法树转换成字符串就可以了。（当然，在一些代码库里会比较困难。
编译器前端存在有x个十年了。clang有何特别之处呢？按我来说，最有趣的就是clang是使用了模块化设计，这意味着你将很容易将clang崁入到你的代码中（还是你的代码放进clang中啊？？？？）（当然，我所指的简单是指：以下的使用例子都是一些不超过50行的代码（这些代码会告诉你如何将你的代码跟clang合体）
你是否有一大堆c代码并想(无需关注细节)自动化重构它？你是否希望ctags能更好地处理c++ obj_c=代码？你是否统计你的代码（觉得grep不够用）？那么恭喜你，clang可以帮到你。
本教程将会介绍预编译，解析和AST的库。举个例子：我们提供了一个收集全局定义（并如何使用这些收集到的全局定义）程序：提供输入文件，会生成输出文件。最后这个程序（估计是所有的例子程序完成后合成的）会提供一个例子：将vim源码作为输入文件，产生2.4m的html文件（vim源码使用了大量的全局定义）更为NB的是，这个程序是“开箱即用”：不需要修改源代码和makefile文件。
温馨提示一下：你看这个文章有可能已经过时了。原因：一，clang还在不停地开发中，它连静态文态都没有（现在所有文档都是doxgen根据代码和注释生成的？？）二，完全支持所有c++特性的编译器现在还没有，同样clang也不是。三、我写下此教程的所用的clang是2008.9.28check出来的。
clang 在所有平台都能使用。在这个教程中，我假拟你是Unix-base的平台。当然，从理论上来讲，所有程序在Windows平台下也是能够运行的。
开始

_____start___________从下开始是教你如何安装的，不翻译了吧。。。。
There is no official release of clang yet, you have to get it from SVN and build it for yourself. Luckily, this is easy:
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm
PATH=$PATH:/Applications/Graphviz.app/Contents/MacOS ./configure
make -j2

cd tools
svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
cd clang
make -j2 
If you call ./configure without graphviz in your PATH, that’s fine too. You’ll be missing some visualization functionality, but we won’t use that in this tutorial anyway.
Note that this does a debug build of llvm and clang. The resulting libraries and binaries will end up inllvm/Debug and are a lot slower than the release binaries (which you get when running ./configure --enable-optimized).
You can find more information in clang’s official getting started guide. By the way, if you’re using Time Machine, you probably want to emit the llvm folder from your backup — else, 700mb get backed up every time you update and recompile llvm and clang.
XXX: Browse clang source.
_____end___________从上开始是教你如何安装的，不翻译了吧。。。。

一，最低限度。（昵玛，什么翻译!!）
一个前端由好几个部分组成。首先介绍的是lexer(词法分析器。。）是将字符串转换成token流。例如，将while转换成token kw_while。由于性能的原因，clang没有独立的预编译器，这个工作（预编译所做的工作。。）在词法分析时做了。
Preprocessor类是词法分析器的主要接口，而且也是基本上只要你写clang的插件就要使用的类。现在，让我们创建一个Preprocess的实例。我们的第一个工作基本上没有实现任何功能，只是实例化一个Preprocess变量之后退出。
创建一个Preprocessor需要至少5个参数：一个Diagnostic对象，一个LanOptions对象，一个TargetInfo对象，一个SourceManager对象及HeaderSearch对象。下面让我们来xx这五个东西，以及如何创建他们。
首先，先来介绍Diagnostic：这个是用来向用户展现错误或警告信息的。一个Diagnostic实例有一个DiagnosticClient，这个才是真正向用户展现消息的。我们将使用clang内置的TextDiagnostics这个类。用这个类来将warnings和error显示在命令行窗口（跟clang中使用的是同一个)
接下来，我们将介绍LangOptions。这个类是用来配置你到底是编译c还是c++，和那些语言的按照你设置的一些扩展。创建这个类的实例非常容易，它不需要任何的参数。
TargetInfo这个类也不难，因为它的构造函数是私有的，所以我们需要调用一个工厂类来创建实例。工厂类需要一个“host triple"的参数，这个参数是用来设置clang是为哪个计算机体系编译出来的(比如：i386-apple-darwin)。我们将这个参数的值设为LLVM_HOST_TRIPLE。这个值包含了(while contains the host triple describing the machine llvm was complied on 我不会翻译。)在理论上，你使用clang作为一个交叉编译也是非常容易的。在Preprocessor在增加目标定义（比如：_APPLE_）的时候是需要用到TargetInfo实例的。当代码的最后记得要删除这个实例。
SourceManager 这个类在clang中是用来加载源代码的缓存的。在创建这个类的实例时，也是不需要任何的参数。
最后，让我们来介绍HeaderSearch这个类，创建这个类的实例需要一个FileManager的实例。HeaderSearch这个类是用来设置clang去哪里找到include 文件。
所以，创建一个Preprocessor实例，需要：
_________下面是代码，不翻译：begin
TextDiagnostics diagClient;
Diagnostic diags(&diagClient);
LangOptions opts;
TargetInfo* target = TargetInfo::CreateTargetInfo(LLVM_HOST_TRIPLE);
SourceManager sm;
FileManager fm;
HeaderSearch headers(fm);
Preprocessor pp(diags, opts, *target, sm, headers);
// ...
delete target; 
_________上面是代码，不翻译：end
因为在整个教程中，都需要用到Preprocessor这个类的实例。所以我将上面的代码放到一个独立的文件：PPContext.h。加上这个文件，tut01_pp.cpp 是非常简短的。（我非常希望读者能够花点时间去读这两个源代码文件。
现在，我们就只剩下编译tut01_pp.cpp了就可以结束第一部分了。
g++ -I/Users/$USER/src/llvm/tools/clang/include \
  `/Users/$USER/src/llvm/Debug/bin/llvm-config --cxxflags` \
  -fno-rtti -c tut01_pp.cpp
g++ `/Users/$USER/src/llvm/Debug/bin/llvm-config --ldflags` \
  -lLLVMSupport -lLLVMSystem -lLLVMBitReader -lLLVMBitWriter \
  -lclangBasic -lclangLex -lclangDriver \
  -o tut01 tut01_pp.o 
在编译的时候，你需要设置 -fno-rtti这个参数，因为clang也是这样子编译的。否则，縺接器会在链接时报错：
 Undefined symbols:
    "typeinfo for clang::DiagnosticClient", referenced from:
        typeinfo for DummyDiagnosticClientin tut01_pp.o
  ld: symbol(s) not found 
另外请注意，你可能需要很多的库链接，clang和llvm都有设计很好的细粒化的库，所以你可以只链接你所需要的库。
第一部分讲完了，现在你可以运行你第一个超NB的，基于clang的程序了：./tut01
当然，这个程序并没有做任何事情。欲知后事如何，请听下回分解。
第二部分：预编译一个文件。
现在我们的程序还没有什么意思，这是因为这个程序并没有做任何的事情。现在我们对这个程序做一些修改，使其将c代码文件变成一个预编译对象。将一个文件加入到preprocessor上，我们使用以下语句：
const FileEntry* file = fm.getFile("filename.c");
sm.createMainFileID(file, SourceLocation());
pp.EnterMainSourceFile(); 
上述语句，创建了一个file实例来表示输入文件的。并将其存储在SourceManager对象的main file。第二行语句是告诉preprocessor将SourceManager的主文件放到文件列表。这条语句还进行了其它操作（例如根据预定义去创建一个缓冲）。
现在一个源文件加进去了，我们可以让preprocessor对其进入预编译，之后我们可以得到token:
Token Tok;
do {
  pp.Lex(Tok);  // read one token
  if (context.diags.hasErrorOccurred())  // stop lexing/pp on error
    break;
  pp.DumpToken(Tok);  // outputs to cerr
  cerr << endl;
} while (Tok.isNot(tok::eof)); 
请完整地看完tut02_pp.cpp。请注意：这是一个完成度非常高的预编译器，已经能够正确处理各种情况了（各种弯弯角角都能处理!!）也能将注释从源代码中剥离出来。这个程序是可以编译完全的，跟tut01一样。
编译完了之后，我们可以来玩玩看了。比如：现在我们将input01.c作为输入文件：
$ ./tut02 input01.c 
typedef 'typedef'
char 'char'
star '*'
identifier '__builtin_va_list'
semi ';'
int 'int'
identifier 'main'
l_paren '('
r_paren ')'
l_brace '{'
int 'int'
identifier 'a'
equal '='
numeric_constant '4'
plus '+'
numeric_constant '5'
semi ';'
int 'int'
identifier 'b'
equal '='
input01.c:5:13: warning: "/*" within block comment
  /* Nested /* comments */ 12; // are handled correctly
            ^
numeric_constant '12'
semi ';'
int 'int'
identifier 'c'
equal '='
numeric_constant '12'
semi ';'
r_brace '}'
eof '' 
请注意 typedef char* __builtin_va_list这个定义，这个是从buffer那里读取字符串。还有请记住（这里的翻译好傻。。）格式化警告信息输出:TextDiagnostics 我们是直接从库里拿出来使用的。当然，你也可以尝试增加errorneous。因为就正如你所看到的，在tryinput02.c里，有一些错误能被检测到，而有一些则不能。
第三部分：include files;
如果你在程序中植入了类似"#include "的代码，然后你的代码就不能工作了。例如我们写下如下的代码，并将其保存在input03.c
$ ./tut02 input03.c 
typedef 'typedef'
char 'char'
star '*'
identifier '__builtin_va_list'
semi ';'
input03.c:1:10: error: 'stdio.h' file not found
#include <stdio.h>
         ^ 
我们需要告诉preprocessor去哪里找头文件。标准头文件的位置因系统的不同而不同。举个例子：在Leopard系统中在/usr/lib/gcc/i686-apple-darwin/4.0.1/include。
你通过HeaderSearch实例来将那些路径加进去。它的SetSearchPaths()方法xx(take) 一个DirectoryLookups列表(用户自定义的头文件目录在前，系统头文件目录在后)，一个特殊系统头文件下标和一个当需要包含当前目录头文件目录的标签。
但是，非常幸运，clang只需要使用一个帮助类 ，设置一些寻找头文件的路径是非常容易的。这个帮助类叫作：InitHeaderSearch类。我们通过以下的代码来增加系统默认的头文件目录。
InitHeaderSearch init(headers);
init.AddDefaultSystemIncludePaths(opts);
init.Realize();  // this actually sends the header list to HeaderSearch 
通过这些小小的变化 #included 一些系统文件是能够工作的了。让我们来看看完整的tut03_pp.cpp。
$ ./tut03 input03.c
# ... lots of output omitted
semi ';'
r_brace '}'
int 'int'
identifier 'main'
l_paren '('
r_paren ')'
l_brace '{'
identifier 'printf'
l_paren '('
string_literal '"Hello, world\n"'
r_paren ')'
semi ';'
r_brace '}'
eof '' 
这个....也把include文件里的tokens也给分析了，所以输出也挺长的。
不过，你也有可能得到以下面相类似的warnings。
/usr/include/sys/cdefs.h:137:29: warning: "__MWERKS__" is not defined, evaluates to 0
#if defined(__MWERKS__) && (__MWERKS__ > 0x2400) 
这是一个warning，gcc或者命令行clang黑夜不会将这个信息打印出来。为了不显示这个warning，我们必须在PPContext.h加上一行语句忽视此类warning。
通过几个功能的实现，这个程序终于看起来像一个“真正的”preprocessor了。你可以去clang的源代码Driver/PrintPreprocessedOutput.cpp去看preprocessor是如何实现的。（XXX:链接到clang的网页svn。。。。。。。。。。什么翻译？？）
第四部分：解析一个文件。
preproscess给了我们一个token流，但我们现在还不能写一个parser将那些token流解析以供AST使用。幸运的是，clang可以帮我们去做。但是，clang将parse从AST构造中脱离出来，意味你可以使用parser，但是不能使用clang的AST。
那么，现在让我们来看看clang的parser是如何工作的。Parser构造函数需要一个参数：父类为Action的类实例。Actions是一个抽象类，有许多抽象函数的类。举个例子，ActOnStratOfFunctionDef()这个函数会在Parser解析函数定义的时候调用。直到我在写这个教程的时候，这个类有接近100个虚函数你可以用来重载的。
差不多所有的虚函数都是设置性的函数。但是，isTypeName()是一个特别的函数，在解析的时候会进行不同的xxoo。
嘿嘿，不过你是幸运的。因为已经有一个MinimalAction类，这个类已经实现了所有必需的语义分析。所以我们在可以很简便地使用这个类。请看下面的代码：
IdentifierTable tab(context.opts);
MinimalAction action(tab);
Parser p(context.pp, action);
p.ParseTranslationUnit(); 
上面的那些代码就是我们这一部分要讲的实际上的全部内容了。为了编译这个程序，你需要在链招接那部分加上 -lclangParse。请阅读tut04_parse.cpp的完整代码。为了演示这个程序看起来更简单明了，它将输出程序解析（以input03.c作为输入）的一些统计数据。
//下面是程序输出
$ ./tut04 input03.c

*** Identifier Table Stats:
# Identifiers:   83
# Empty Buckets: 8109
Hash density (#identifiers per bucket): 0.010132
Ave identifier length: 8.084337
Max identifier length: 28

Number of memory regions: 1
Bytes allocated: 1901 
第五部分：让我们来做点有意思的事情吧。
现在，我们可以做一些有实际意义的代码分析了。还记得我们的目标么，我们想要写一个程序列出所有的全局变量的信息。让我们从找到所有全局变量开始吧，而在parse阶段，我们能做到这个。
第次当parser找到一个声明的时候，parser会调用ActOnDeclarator()这个函数。所以我们需要在MinimalAction的子类重载这个函数。
什么是声明，在c语言中下面几个是声明：一个变量，一个函数。一个结构，一个typedef。下面的代码是声明的例子。
const unsigned long int b;  //b是一个恒量。 
int *i;  // 声明一个指向int的指针变量。
extern int a;  //声明一个int 变量。
void printf(const char* c, ...);  // 一个函数的声明
typedef unsigned int u32;  // a typedef
struct { int a } t;  // 一个struct声明了的变量。a variable that has an anonymous struct as type
char *(*(**foo [][8])())[];  // 这是什么？请看下面。
一个声明大致分为两部分：左边：声明类型（比如：const unsigned long int 或者 struct{int a} 。右边：一个变量的名字（这里有不会翻译的，干脆不翻。。）（比如：b, *i 或者 *(*(**foo [][8])())[]).左边代表的是clang的声明（潜在的复杂）右边是个声明名字的列表。一个DeclaraorChunk可以是一个指针，引用，数组或者是函数。
就像解释那里那样，最后一个声明它是这样的：
foo 是一个数组一个有8个指向函数（返回一个指向字符串数组）的数组。
所以，那 DeclaratorChunk传递给我们回调有一个列表，其中包括DeclaratorChunks的信息：数组，数组，指针，指针，指针，函数，指针，数组，指针（根据那个顺序）（什么顺序？？）当然，那些信息是比较多的（比如：在Array块那里会有array的大小）
因为我们想要检测全局变量，所以我们需要跳过那些声明中DeclaratoChunk有KindFunction的。还好，DeclaratorChunk中有一个函数isFunctionDeclarator()可以进行这个检测。
另外：我们只对那些全局变量有兴趣（就像之前讲的函数或者局部变量，是不感兴趣的）要检查这些，Declarator提供一个getContext()的函数。这个函数返回文件范围内的FileContext
我们对由typedef和extern开始的声明没有兴趣（因为我们对声明的定义没有兴趣）因为typedef和extern是属于左边的，有关它们的信息是保存在declartor的DeclSpec.
还有一个，我们不需要关心系统头文件的全局变量。为了判断这个，我们需要知道这个变量的声明所在文件是什么。clang使用SourceLocation这个类来获取这些信息。因为有很多的地方我们会使用到SourceLocations(因为每个声明都需要保存它是从哪里来的）我们可以做点东西，让SourceLocation的数据量小一点：只有32位数据跟int一样大。当然，做了优化之后，你从中获取信息也没有那么多了。同时，你还需要一个SourceManager。这个是用来收集所有文件id所有信息的。我们可以使用SourceManager有一个方法isInSystemHeader(loc)，（提示：file ids跟 macro ids 是不一样的。）
SourceLocations, .....(翻个屁!!);
下面是一些信息的对比。
Macro- : FileIDs, 物理 跟 逻辑 地址。 合法性， 包含目录.
file id: 一部分是缓冲列表位置（14位）一部分是缓冲的位置（17位）
macro id: 20位的macro id 9位是物理位置偏移量（只正不负）。2位是来用的
20位存储的数据是一个结构的虚拟地址（指向宏展开后在文件中的位置）和一个物理地址（指向从哪个token产出后的字符数据）
好像要解释一下什么叫MemoryBuffers了。
文件地址是同时存在有物理和逻辑地址的。
宏的物理地址需要那个文件地址再加上宏的位置。
logical: subject to #line.<- not true!  逻辑上来说（昵玛，这个怎么翻译）
Defined in a file vs defined in a macro. Linked chain? Comment in SourceManager.h is flat out wrong. Logical/physical not about \#line, but about macro substitutions. Logical is where the macro is in the file, physical is where in the macro definition stuff happens (?). /// MacroIDInfo - Macro SourceLocations refer to these records by their ID. /// Each MacroIDInfo encodes the Instantiation location - where the macro was /// instantiated, and the PhysicalLoc - where the actual character data for /// the token came from. An actual macro SourceLocation stores deltas from /// these positions. That seems to be right. Somewhere else: Physical is were the token comes from, virt where it should come from.
定义一个文件 VS 定义一个宏。连接链？注释在sourceManager.h是错误的(这是神马？？）逻辑/物理不是\#line，而是宏定义。逻辑位置是宏定义所在的文件上的位置。物理位置是宏定义产生作用的地方。//MacroIdInfo，Macro SourceLocations 通过他们的id指向记录。///每一个MacroIdInfo压缩了了最初始的位置（定义的地方）上面的文字不翻译了，说实话是不会翻译，不知道讲的是什么，只是大概知道在讲宏的逻辑物理位置。
综上所述，我们的ActOnDeclarator() 会是这样的。
virtual Action::DeclTy *
ActOnDeclarator(Scope *S, Declarator &D, DeclTy *LastInGroup) {
  const DeclSpec& DS = D.getDeclSpec();
  SourceLocation loc = D.getIdentifierLoc();

  if (D.getContext() == Declarator::FileContext
      && DS.getStorageClassSpec() != DeclSpec::SCS_extern
      && DS.getStorageClassSpec() != DeclSpec::SCS_typedef
      && !D.isFunctionDeclarator()
      && !pp.getSourceManager().isInSystemHeader(loc)) {
    IdentifierInfo *II = D.getIdentifier();
    cerr << "Found global declarator " << II->getName() << endl;
  }
  return MinimalAction::ActOnDeclarator(S, D, LastInGroup);
} 
DeclTy是一个void的别名。每一个Action可以决定如何描述一个声明。我们使用的是MinimalAction 使用的。这时，我们只需要使用到一个参数： Declarator &D.
完整的代码在tut05_parse.cpp 。下面是运行结果(将input04.c作为输入文件)
Found global user declarator a
Found global user declarator a
Found global user declarator b
Found global user declarator c
Found global user declarator funcp
Found global user declarator fp2
Found global user declarator fp3
Found global user declarator f
Found global user declarator f2
Found global user declarator t 
这个程序可以完美地运行，只是有点小bug：他会将f 和 f2 认为是全局变量（而实际上这两个是函数来的。引用xxx的话（从clang中很同色而且很有帮助的邮件列表：）
从功能上来讲，在c语言中，不太可能将一个全局函数声明和一个全局变量区分出来（在没有使用typedef和__type类型的表达式时）。因为这个功能不是在parser阶段能做的，你需要使用Sema，自己做这些，还是有点保守，打印出来的东西，实际上不是全局。
举个一个没有明确类型声明的函数声明。
typedef int x();
x z;
__typeof(z) r; 
在下一部分中，我们将会解决这个问题。
请注意，这部分讲的内容并不能找出静态的局部函数（实际上也是全局函数）。我们不在这里解决。不过别担心，这个不难的。
第六部分：用clang进行语法分析。
为了区分变量的声明和函数原型的不同，我们需要进行语法分析。同样，clang已经帮我们做好了。clang的sema库基本上只是一个Action对象传给解析器。而且，所有的这些都是在幕后处理的。
sema的接口是非常简约的：一个函数：ParseAST().这个函数需要一个Preprocessor对象和一个ASTConsumer.在后台，这个函数会创建一个Parser对象并将这个对象传递给一个Action，而去做一个语义分析。这样：Action会进行AST分析。
现在，我们不需要使用MyAction.而是，我们将使用ASTConsumer，这个东西么，就像Sema的Action一样。 我们需要重载的方法是HandleTopLevelDecl(),这个函数会在每个顶级声明的时候调用。这个方法会返回一个Decl对象，这个对象在AST类中用来声明的。HandleTopLevelDecl()有一个小怪异：如果声明包含有多个变量（比如：int a, b;),这个函数只会调用一次。返回的Decl将会是一个链表，你需要遍历去取得每个值（虽然，这在将来会改得更加智能）
我们只处理变量声明，而且只是全局变量声明，所以代码会如下写：
if (VarDecl *VD = dyn_cast<VarDecl>(D)) {
  for (; VD; VD = cast_or_null<VarDecl>(VD->getNextDeclarator())) {
    if (VD->isFileVarDecl() && VD->getStorageClass() != VarDecl::Extern)
      cerr << "Read top-level variable decl: '" << VD->getName() << "'\n";
  }
} 
这个是我们所做的事情中的最后一件事情，是不是比前面的要简单得多，并且它是正确的。耶。
我们的程序会在tut06_sema.cpp  ParseAST()这个函数会在Preprocess的EnterMainSourceFile()函数中调用。所以你并不需要去调用它，否则的话，你会得到一个重复定义的错误（因为主文件会进入到pp's的文件列表两次）。错误示例如下：
predefines>:3:15: error: redefinition of '__builtin_va_list'
typedef char* __builtin_va_list;
              ^
<predefines>:3:15: error: previous definition is here
typedef char* __builtin_va_list; 
Here’s what our program prints for input04.c:
Read top-level variable decl: 'a'
Read top-level variable decl: 'a'
Read top-level variable decl: 'b'
Read top-level variable decl: 'c'
Read top-level variable decl: 'funcp'
Read top-level variable decl: 'fp2'
Read top-level variable decl: 'fp3'
Read top-level variable decl: 't' 
Observe that f and f2 are now correctly omitted.
很明显，f和f2被正确地删去（应该 翻译得不对。。，故保留）
我们的程序现在可以正确地运行一个真实的代码了(而且代码在50行之内），但它的接口并不是，让我们来解决一下吧。
Tutorial 07: Support for real programs
Compiling “real” source files usually requires that several flags are passed to the compiler. Flags that are commonly used are -I to add directories to the include file search path, and -D to define macros at the command line.
If we make our program compatible to the flags that are used by common C compilers, then we can analyze existing programs simply by changing the compiler. Hence, we’ll add support for -I and -D to our program.
Furthermore, “real” compilation invocations ususally pass several other flags that are specific to code generation. Those flags are not important to our program. Hence, our program will accept arbitrary flags but will ignore them.
Adding support for command-line parameters usually requires a fair amount of code. Luckily, we don’t have to write this code: clang belongs to the LLVM project, and LLVM has a very powerful command-line parameter handling library. It also has great documentation, hence I won’t explain it in detail. In short:
XXX
Code necessary to implement -I (easy) and -D (currently harder than it should be). Slurp rest, need special-case slurper for -o.
Vim:
gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MAC -fno-common \
 -fpascal-strings -Wall -Wno-unknown-pragmas -mdynamic-no-pic \
 -pipe -I. -Iproto -DMACOS_X_UNIX -no-cpp-precomp \
 -I/Developer/Headers/FlatCarbon  -g -O2 \
 -I/System/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 \
 version.c -o objects/version.o 
thus:
static llvm::cl::list<std::string>
D_macros("D", llvm::cl::value_desc("macro"), llvm::cl::Prefix,
    llvm::cl::desc("Predefine the specified macro"));

static llvm::cl::list<std::string>
I_dirs("I", llvm::cl::value_desc("directory"), llvm::cl::Prefix,
    llvm::cl::desc("Add directory to include search path"));

static llvm::cl::opt<string>
InputFilename(llvm::cl::Positional, llvm::cl::desc("<input file>"),
    llvm::cl::Required);

static llvm::cl::list<std::string> IgnoredParams(llvm::cl::Sink);
static llvm::cl::opt<string> dummy("o", llvm::cl::desc("dummy for gcc compat")); 
Nice output ? — html output
Also take care of statics and print the name of the declaring file.
TranslationUnit contains a whole AST (i.e. all toplevel decls)
See tut07_sema.cpp, input05.c, input05.html
Tutorial 08: Working with the AST
StmtVisitor, strangely recurring pattern
traversion: iterators, visitors
visitor only visits a single element (?) — need to recurse manually. Careful: the child iterator can return NULL (e.g. if without else branch will have NULL for the else branch).
expr derived from stmt
Find uses of all globals (in one file only?)
Example in StmtDumper.
XXX: Test with functions containing macros.
only prints uses in functions, that omits some uses (e.g. as initializers of other globals)
LogicalLineNumber works with macro expansion, LineNumber does not.
See tut08_ast.cpp, input06.c
Tutorial 09: Tracking globals across files
To identify globals over several translation units: Combination filename/global name should be unique (global name alone is unique for non-static vars). If static vars in functions should be handled, function name becomes important, too.
Do it like a compiler: For each file, output an .o file, and build the complete file during “link time”. The .o file could be
A copy of the input file
A serialized AST of the input file
A serialized form of the extracted data
Problem with 1.: Need to remember compile flags, paths, etc
Problem with 3.: Likely need manual (de)serializing code, not really flexible
Second options seems to hit the sweet spot: Shows some more clang, keeps parsing paralellizable, but keeps .o files general.
Sadly, serializing is still incomplete, so we can’t do that. So, go with 3 for now. We need to serialize for each file:
(List of declared globals)
List of defined globals (with information if they are static to that file)
List of global uses, perhaps along with a few lines of context
The linker then can for each global list all uses.
Need to ignore globals in system headers. Tricky: Where to put -I files? Need them as users for some dirs (., proto), as system for others (python). For now keep them as system and whitelist .. This drops proto, but that’s ok for now.
Careful: Need to collect globals on the rhs of toplevel inits, too (XXX).
What about multiple declarations (e.g. gui)?
See tut09_ast.cpp, input07_1.c, input07_2.c, and input07.h.
ideas
Some words about codegen and analysis
Wrap up
clang is somewhat modular: you can plug in a new parser as long as it conforms to the Action interface, several ast consumers can be used, etc.
codegen uses a visitor
analysis lib is cool and wasn’t covered at all.
questions
Why is the physical macro offset needed in getPhysicalLoc() but no in getLogicalLoc()?
libDriver: DefineBuiltinMacro, DeclPrinter, pp construction (inter alia header search), perhaps standard options (-D, -I, ?)
Download
You can download this tutorial along with all sources, the Makefile, etc as a zip file.
TODO
XXX: script that can parse EXEC: cmd lines, then use this for program output, code excerpts, etc
XXX: use markdown-python with highlight-code extensions (which uses pygments)
